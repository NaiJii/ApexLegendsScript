global function MapMetrics_Init
global function MapMetrics_RegisterNetworking












global function MapMetrics_ClientTakeScreenshot
global function MapMetrics_ClientInit
global function MapMetrics_ClientEndMapMetrics
global function MapMetrics_ClientRecordDataPoint


const int FPS_THRESHOLD_DEFAULT_VALUE = 55


























const int FRAME_TIME_BUFFER_SIZE = 32
const float FRAME_TIME_MIN_WAIT = 1.0 
const float FRAME_TIME_MAX_WAIT = 3.0 
const float FRAME_TIME_RETRY_WAIT = 1.0 
const float FRAME_TIME_MAX_RETRIES = 3
const float FRAME_TIME_STDEV_TOLERANCE = 0.0001 


struct
{





		array<int> bandwidthInArray
		array<int> bandwidthOutArray
		string metricsFileName
		string metricsDataBuffer
		bool adaptiveScalingOn

		bool oldDvsEnable
		bool oldPerfMetricsDrawingEnabled
		int oldPerfMetrics
		int	oldFpsMax
		int oldVsyncMode
		int oldNotFocusSleep


	int fpsThreshold
} file


void function MapMetrics_Init()
{






}

void function MapMetrics_RegisterNetworking()
{
	if( GetCurrentPlaylistName().find( "map_metrics" ) < 0 )
		return

	Remote_RegisterClientFunction( "MapMetrics_ClientTakeScreenshot", "entity", "string" )
	Remote_RegisterClientFunction( "MapMetrics_ClientInit", "string", "int", 0, INT_MAX )
	Remote_RegisterClientFunction( "MapMetrics_ClientEndMapMetrics" )
	Remote_RegisterClientFunction( "MapMetrics_ClientRecordDataPoint", "entity", "vector", -32000.0, 32000.0, 32, "vector", -200.0, 200.0, 32, "int", -100, 100 )
	Remote_RegisterServerFunction( "MapMetrics_OnClientRecordMetricsData", "int", 0, 500 )
	Remote_RegisterServerFunction( "MapMetrics_OnClientTakeScreenshot" )
}














































































































































































































































































































void function MapMetrics_ClientTakeScreenshot( entity player, string screenshotFileName )
{
	player.ClientCommand( "jpeg " + screenshotFileName )
	Remote_ServerCallFunction( "MapMetrics_OnClientTakeScreenshot" )
}

void function MapMetrics_ClientInit( string buildVersion, int gridSize )
{
	file.metricsDataBuffer = "Hardware,Build ID,Map,Fps Threshold,Grid Square Side Length,Zone,Zone name,Position,FPS,Viewport scale,Network Bandwidth In (KiB/s),Network Bandwidth Out (KiB/s),"
	file.metricsDataBuffer += GetPerfDataLabels()
	file.metricsDataBuffer += "\n"

	file.adaptiveScalingOn = GetCurrentPlaylistVarBool( "map_metrics_adaptive_scaling", false )
	file.fpsThreshold =  GetCurrentPlaylistVarInt( "map_metrics_fps_threshold", FPS_THRESHOLD_DEFAULT_VALUE )

	string buildNum = buildVersion.slice( buildVersion.find( "#" ) )
	file.metricsFileName = "metrics_" + GetMapName() + "_" + GetConsoleName() + "_CL" + buildNum + ".csv"

	file.metricsDataBuffer += GetConsoleName() + "," + buildVersion + "," + GetMapName() +
	"," + file.fpsThreshold + "," + gridSize + ","

	file.metricsDataBuffer += "\n"

	
	file.oldDvsEnable = GetConVarBool( "dvs_enable" )
	file.oldPerfMetricsDrawingEnabled = GetConVarBool( "perf_metrics_drawing_enabled" )
	file.oldPerfMetrics = GetConVarInt( "perf_metrics" )
	file.oldFpsMax = GetConVarInt( "fps_max" )
	file.oldNotFocusSleep = GetConVarInt( "not_focus_sleep" )
	if( HasConVar( "mat_vsyncMode" ) )
		file.oldVsyncMode = GetConVarInt( "mat_vsyncMode" )

	
	SetConVarBool( "dvs_enable", file.adaptiveScalingOn )
	SetConVarBool( "perf_metrics_drawing_enabled", false )
	SetConVarInt( "perf_metrics", 3 )
	SetConVarInt( "fps_max", 0 )
	SetConVarInt( "not_focus_sleep", 0 )
	if( HasConVar( "mat_vsyncMode" ) )
		SetConVarInt( "mat_vsyncMode", 0 )
}

void function MapMetrics_ClientEndMapMetrics()
{
	

	WriteMetricsDataToFile( file.metricsFileName, file.metricsDataBuffer, true )

	file.metricsDataBuffer = ""
	file.metricsFileName = ""
	file.adaptiveScalingOn = false
	file.fpsThreshold = 0

	
	SetConVarBool( "dvs_enable", file.oldDvsEnable )
	SetConVarBool( "perf_metrics_drawing_enabled", file.oldPerfMetricsDrawingEnabled )
	SetConVarInt( "perf_metrics", file.oldPerfMetrics )
	SetConVarInt( "fps_max", file.oldFpsMax )
	SetConVarInt( "not_focus_sleep", file.oldNotFocusSleep )
	if( HasConVar( "mat_vsyncMode" ) )
		SetConVarInt( "mat_vsyncMode", file.oldVsyncMode )
}

void function MapMetrics_ClientRecordDataPoint( entity player, vector position, vector angles, int zoneId )
{
	thread MapMetrics_ClientRecordDataPoint_Thread( player, position, angles, zoneId )
}

void function WaitForFPSToSettle()
{
	float startTime = Time()

	wait FRAME_TIME_MIN_WAIT

	array<float> frameTimeBuffer
	for( int i = 0; i < FRAME_TIME_BUFFER_SIZE; i++ )
	{
		frameTimeBuffer.append( RenderFrameTime() )
		WaitFrame()
	}

	while( Time() - startTime < FRAME_TIME_MAX_WAIT )
	{
		float variance = CalculateFloatArrayVarianceWithGivenPercentile( frameTimeBuffer, 1.0 )
		float stdev = sqrt( variance )
		if( stdev < FRAME_TIME_STDEV_TOLERANCE )
			break

		frameTimeBuffer.fastremove( 0 )
		frameTimeBuffer.append( RenderFrameTime() )
		WaitFrame()
	}
}

void function MapMetrics_ClientRecordDataPoint_Thread( entity player, vector position, vector angles, int zoneId )
{
	waitthread WaitForFPSToSettle()

	
	
	
	int testThreshold = file.fpsThreshold + 5

	
	
	
	
	
	
	
	
	int fps = int( RoundToNearestInt( 1.0 / RenderFrameTime() ) )
	if( fps < testThreshold )
	{
		int retryFps = 2 * file.fpsThreshold
		for( int i = 0; i < FRAME_TIME_MAX_RETRIES; i++ )
		{
			wait FRAME_TIME_RETRY_WAIT
			int thisFps = int( RoundToNearestInt( 1.0 / RenderFrameTime() ) )
			retryFps = int( min( retryFps, thisFps ) )
		}
		fps = retryFps
	}

	string zoneName = "#NOT_IN_NAMED_ZONE"
	if( zoneId != -1 )
		zoneName = GetZoneNameForZoneId( zoneId )

	if( zoneName == "" )
		zoneName = "#NOT_IN_NAMED_ZONE"

	file.metricsDataBuffer += ",,,,,"
	file.metricsDataBuffer += zoneId + ","
	file.metricsDataBuffer += zoneName + ","
	file.metricsDataBuffer += "setpos " + position.x + " " + position.y + " " + position.z + "; setang " + angles.x + " " + angles.y + " " + angles.z + ","
	file.metricsDataBuffer += fps + ","
	file.metricsDataBuffer += GetClientViewportScaling() + ","

	int bandwidthIn = GetNetworkBandwithIn() / 1024
	int bandWidthOut = GetNetworkBandwithOut() / 1024
	file.metricsDataBuffer +=  bandwidthIn + ","
	file.metricsDataBuffer +=  bandWidthOut + ","

	file.bandwidthInArray.append( bandwidthIn )
	file.bandwidthOutArray.append( bandWidthOut )

	
	
		
		
		
	
	file.metricsDataBuffer += GetCurrentPerfData()
	file.metricsDataBuffer += "\n"

	Remote_ServerCallFunction( "MapMetrics_OnClientRecordMetricsData", fps )
}

void function RecordNetworkBandwidth()
{
	if( file.bandwidthInArray.len() < 2 )
		return

	file.bandwidthInArray.sort()
	file.bandwidthOutArray.sort()

	int maxIndex = int( 0.9 * file.bandwidthInArray.len() ) 
	int maxBandwidthIn = file.bandwidthInArray[maxIndex - 1] / 1024
	int maxBandwidthOut = file.bandwidthOutArray[maxIndex - 1] / 1024

	float varianceIn =  CalculateIntArrayVarianceWithGivenPercentile( file.bandwidthInArray, 0.9 ) / ( 1024 * 1024 )
	float varianceOut = CalculateIntArrayVarianceWithGivenPercentile( file.bandwidthOutArray, 0.9 ) / ( 1024 * 1024 )

	string networkBandwidthInLine =  "\nMax network bandwidth in (ignoring outliers): " + maxBandwidthIn + " KiB/s\nVariance (ignoring outliers): " + varianceIn + " (KiB/s)^2\n"
	string networkBandwidthOutLine = "\nMax network bandwidth out (ignoring outliers): " + maxBandwidthOut + " KiB/s\nVariance (ignoring outliers): " + varianceOut + " (KiB/s)^2\n"

	file.metricsDataBuffer += networkBandwidthInLine
	file.metricsDataBuffer += networkBandwidthOutLine

	file.bandwidthInArray.clear()
	file.bandwidthOutArray.clear()
}



















































































































