global function POIPlayerSpawning_Exists
global function POIPlayerSpawning_Init

















global function  CL_POISpawn_LandingMarkers_Destroy



const vector CUSTOM_DROPSHIP_PARALLEL_ANGLES = < 0, 1, 0 >



enum eTeamType
{
	INVALID,
	HUMAN,
	MIXED,
	BOTS,
	COUNT_
}


const string 	CUSTOMDROPSHIP_ANIM_FLYIN_NAME = "dropship_classic_mp_flyin"
const string	CUSTOMDROPSHIP_SOUND_NAME = "goblin_imc_evac_hover"

const string 	CURATED_SPAWNPOINT_CLASSNAME 		= "info_poispawning_squadspawn"
const string 	CURATED_SPAWNPOINT_SCRIPTNAME 		= "poispawning_curated_spawn"
const float 	POISPAWN_SQUADS_MINDISTANCE 		= 3937.01 * 2.0 
const float 	POISPAWN_CURATEDSPAWNS_MINDISTANCE 	= 3937.01 * 1.0 
const int 		POISPAWN_MAX_SPAWNPOINTS_PER_ZONE 	= 2
const float 	POISPAWN_GROUPRADIUS 				= 64
const float		POISPAWN_CLEARING_DISTANCE 			= 96 
const float 	POISPAWN_AIRDROPHEIGHT 				= 12709 
const float 	POISPAWN_GROUNDSPAWNHEIGHT 			= 128
const float 	POISPAWN_STARTRADIUS_DEFAULT 		= 65000
const int		SQUADS_PERGROUP_DEFAULT 			= 2

const float 	POISPAWN_CONSTRAINEDDIVE_2DRADIUS = 2952.8 

const asset		GROUNDMARKER_FX_RING 	= $"P_ar_target_fuse_instant" 
const asset 	GROUNDMARKER_FX_CENTER 	= $"P_ar_loot_drop_point_cp"
const asset 	GROUNDMARKER_FX_BEACON 	= $"P_ar_loot_drop_point_far_cp"
const float		GROUNDMARKER_RING_FX_RADIUSDIVISOR = 20.0
const vector 	GROUNDMARKER_RING_FX_COLOR = < 19, 255, 190 >
const vector	GROUNDMARKER_RING_FX_OUTERMOST_COLOR = < 255, 19, 19 >
const vector 	GROUNDMARKER_CENTER_FX_COLOR = < 19, 219, 190 >
const string	POISPAWN_SKYDIVEDESTWP_NAME = "poispawn_wp"
const int		POISPAWN_SKYDIVEDESTWP_NDX_TEAM = 0

#if DEV
const FORCEDEBUG = false
#endif



struct sSkydiveLandingMarker
{
	entity landingWP
	entity centerFX
	entity minimapObj
}

struct
{


























































		array< int > LandingMarker_FX_Rings
		array< int > LandingMarker_FX_Beams

} file






































































































































































































































































































































































#if DEV
void function DEVSphere( bool debugParm, vector center, float radius, vector color, bool bShowThruGeo, float showTime, int segments = 4 )
{
	bool doDebug = debugParm || FORCEDEBUG
	if( doDebug )
	{
		DebugDrawSphere( center, radius, color, bShowThruGeo, showTime, segments )
	}
}

void function DEVCube( bool debugParm, vector center, float size, vector color, bool bShowThruGeo, float showTime )
{
	bool doDebug = debugParm || FORCEDEBUG
	if( doDebug )
	{
		DebugDrawCube( center, size, color, bShowThruGeo, showTime )
	}
}

void function DEVLine( bool debugParm, vector start, vector end, vector color, bool showThruGeo, float showTime )
{
	bool doDebug = debugParm || FORCEDEBUG
	if( doDebug )
	{
		DebugDrawLine( start, end, color, showThruGeo, showTime )
	}
}

void function DEVCylinder( bool debugParm, vector center, vector angles, float radius, float height, vector color, bool bShowThruGeo, float showTime )
{
	bool doDebug = debugParm || FORCEDEBUG
	if( doDebug )
	{
		DebugDrawCylinder( center, angles, radius, height, color, bShowThruGeo, showTime )
	}
}

void function DEVPrint( bool debugParm, string str )
{
	bool doDebug = debugParm || FORCEDEBUG
	if( doDebug )
	{
		printt( str )
	}
}
#endif





bool function POIPlayerSpawning_Exists()
{
	return( GetCurrentPlaylistVarBool( "poiplayerspawning_exists", false ))
}


bool function PLV_RandomSpawnPoints()
{
	return( GetCurrentPlaylistVarBool( "poiplayerspawning_randompoints", true ))
}


bool function PLV_Airdrop()
{
	return( GetCurrentPlaylistVarBool( "poiplayerspawning_airdrop", true ))
}


float function PLV_Airdrop_Height()
{
	return( GetCurrentPlaylistVarFloat( "poiplayerspawning_airdrop_height", POISPAWN_AIRDROPHEIGHT ))
}

bool function PLV_DropShipJump()
{
	return( GetCurrentPlaylistVarBool( "poiplayerspawning_dropshipjump", true ) )
}

bool function PLV_CustomDropship()
{
	return( GetCurrentPlaylistVarBool( "poiplayerspawning_customdropship", true ) )
}

bool function PLV_CustomDropship_AllShipsParallel()
{
	
	return( GetCurrentPlaylistVarBool( "poiplayerspawning_customdropship_allshipsparallel", true ) )
}

bool function PLV_CustomDropship_Skip1P()
{
	return( GetCurrentPlaylistVarBool( "poiplayerspawning_customdropship_skip1p", true ) )
}

bool function PLV_PingPairedEnemyOnLanding()
{
	return( GetCurrentPlaylistVarBool( "poiplayerspawning_pingpairedenemyonlanding", true ) )
}


int function PLV_TeamsPerGroup()
{
	return( GetCurrentPlaylistVarInt( "poiplayerspawning_teamspergroup", SQUADS_PERGROUP_DEFAULT ))
}

float function PLV_SquadsMinDistance()
{
	return( GetCurrentPlaylistVarFloat( "poiplayerspawning_squadsmindistance", POISPAWN_SQUADS_MINDISTANCE ) )
}

bool function PLV_UseCuratedSpawns()
{
	return( GetCurrentPlaylistVarBool( "poiplayerspawning_usecuratedspawns", true ) )
}

bool function PLV_SpawnWithFreefall()
{
	return( GetCurrentPlaylistVarBool( "poiplayerspawning_spawnwithfreefall", false ) )
}

float function PLV_Skydive2DRadius()
{
	return( GetCurrentPlaylistVarFloat( "poiplayerspawning_skydive2dradius", POISPAWN_CONSTRAINEDDIVE_2DRADIUS ) )
}







































































































































void function POIPlayerSpawning_Init()
{
	if( !POIPlayerSpawning_Exists() )
		return

	PrecacheParticleSystem( GROUNDMARKER_FX_RING )
	PrecacheParticleSystem( GROUNDMARKER_FX_CENTER )
	PrecacheParticleSystem( GROUNDMARKER_FX_BEACON )






		Waypoints_RegisterCustomType( POISPAWN_SKYDIVEDESTWP_NAME, CL_POISpawn_LandingMarkers_Create )


	Remote_RegisterClientFunction( "CL_POISpawn_LandingMarkers_Destroy" )

	RegisterSignal( "POISpawn_TeamLanded" )
	RegisterSignal( "POISpawn_CustomDropship_CameraZoom" )
}































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































void function CL_POISpawn_LandingMarkers_Create( entity wp )
{
	entity player = GetLocalViewPlayer()

	int playerTeam = player.GetTeam()
	int wpTeam = wp.GetWaypointInt( POISPAWN_SKYDIVEDESTWP_NDX_TEAM )

	if( playerTeam != wpTeam )
		return

	int ringFXIndex = GetParticleSystemIndex( GROUNDMARKER_FX_RING )

	vector destination = wp.GetOrigin()

	float skydiveRadius = PLV_Skydive2DRadius()

	int numRings = 3
	for( int i = 0; i <= numRings; i++ )
	{
		float radiusMod 	= 1 - ( i * 0.025 )
		float ringRadius 	= skydiveRadius * radiusMod / GROUNDMARKER_RING_FX_RADIUSDIVISOR

		
		int ringFX = StartParticleEffectInWorldWithHandle( ringFXIndex, destination, < 0,0,0 > )
		vector ringColor = GROUNDMARKER_RING_FX_COLOR * radiusMod
		EffectSetControlPointVector( ringFX, 1, ringColor )
		EffectSetControlPointVector( ringFX, 2, < ringRadius, 0, 0> )
		file.LandingMarker_FX_Rings.append( ringFX )
	}

	
	int numBeams = 19
	vector destElevated = destination + < 0, 0, 5000 >
	array< vector > destLocsArray = GetPointsOnCircle( destElevated, <0,0,0>, skydiveRadius, numBeams  )
	array< vector > destGroundLocsArray

	int beamFXIndex       = GetParticleSystemIndex( GROUNDMARKER_FX_BEACON )
	foreach( dest in destLocsArray )
	{
		vector destOnGround = OriginToGround( dest )
		int beamFX = StartParticleEffectInWorldWithHandle( beamFXIndex, destOnGround, < 0, 180 ,0 > )
		EffectSetControlPointVector( beamFX, 1, GROUNDMARKER_RING_FX_COLOR )
		file.LandingMarker_FX_Beams.append( beamFX )
	}
}

void function CL_POISpawn_LandingMarkers_Destroy()
{
	foreach( ringFX in file.LandingMarker_FX_Rings )
	{
		if( EffectDoesExist( ringFX ) )
		{
			EffectStop( ringFX, true, true )
		}
	}
	file.LandingMarker_FX_Rings.clear()

	foreach( beamFX in file.LandingMarker_FX_Beams )
	{
		if( EffectDoesExist( beamFX ) )
		{
			EffectStop( beamFX, true, true )
		}
	}
	file.LandingMarker_FX_Rings.clear()
}


















































































































































































































































































































































































































































































































































































































































































































































