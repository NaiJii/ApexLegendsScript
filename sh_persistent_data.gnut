global function ShPersistentData_LevelInit_Begin
global function ShPersistentData_LevelInit_Finish









global function AddCallback_OnPersistentDataReady
global function GetPersistentIntArray
global function IsPersistenceBitSet
global function IsAnyPersistenceBitSet


#if DEV
global function DEV_ShouldIgnorePersistence
#endif
































global function ClientToUI_OnPersistentDataReady


#if DEV
global bool dev_should_ignore_persistence = false
global function SetShouldIgnorePersistence
#endif















global typedef OnPersistentDataReadyCallbackType void functionref( entity player )










struct FileStruct_LifetimeLevel
{







	array<OnPersistentDataReadyCallbackType> onPersistentDataReadyCallbacks
}
FileStruct_LifetimeLevel& fileLevel








#if DEV
void function SetShouldIgnorePersistence()
{
	dev_should_ignore_persistence = GetCurrentPlaylistVarBool( "dev_should_ignore_persistence", false )
}
#endif

void function ShPersistentData_LevelInit_Begin()
{
	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

#if DEV
		SetShouldIgnorePersistence()
#endif











}


void function ShPersistentData_LevelInit_Finish()
{
}


















#if DEV
bool function DEV_ShouldIgnorePersistence()
{
	return dev_should_ignore_persistence
}
#endif













































































































































































































































































































































void function AddCallback_OnPersistentDataReady( OnPersistentDataReadyCallbackType cb )
{
	Assert( !fileLevel.onPersistentDataReadyCallbacks.contains( cb ), "Callback already registered" )
	fileLevel.onPersistentDataReadyCallbacks.append( cb )
}





array<int> function GetPersistentIntArray( entity player, string variableName )
{
	array<int> arr
	int size = PersistenceGetArrayCount( variableName )

	for ( int i = 0; i < size; i++ )
	{
		int element = player.GetPersistentVarAsInt( variableName + "[" + i + "]" )

		arr.append( element )
	}

	return arr
}











































bool function IsPersistenceBitSet( entity player, string persistenceVar, int bitIndex )
{
	int arrayIndex = bitIndex / 32
	int bitOffset  = bitIndex % 32

	int decimalValue = 1 << bitOffset

	Assert( arrayIndex < PersistenceGetArrayCount( persistenceVar ), "Need to increase the array size of the persistenceVar " + persistenceVar )
	persistenceVar = persistenceVar + "[" + arrayIndex + "]"

	return ((player.GetPersistentVarAsInt( persistenceVar ) & decimalValue) != 0)
}




bool function IsAnyPersistenceBitSet( entity player, string persistenceVar )
{
	int arrayCount = PersistenceGetArrayCount( persistenceVar )
	for ( int i = 0; i < arrayCount; i++ )
	{
		if ( player.GetPersistentVarAsInt( persistenceVar + "[" + i + "]" ) > 0 )
			return true
	}
	return false
}



















































void function ClientToUI_OnPersistentDataReady()
{
	foreach( OnPersistentDataReadyCallbackType cb in fileLevel.onPersistentDataReadyCallbacks )
		cb( GetLocalClientPlayer() )
}




