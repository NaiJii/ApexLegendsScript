global function ShAmbientDialogue_Init
global function GetAllAmbientDialogue






















const int AMBIENT_DIALOGUE_FAIL_RANDOM_RETRY_ATTEMPTS = 3



const bool VERBOSE_PRINT_DEBUG = false

global struct AmbientDialogueData
{
	string eventName
	ItemFlavor& speakingLegendFlav
}

global struct AmbientConversationData
{
	string							convoName
	string							triggerScriptName
	array<AmbientDialogueData> 		convoSequence
	array<int> 						spokenBySquads			
	table<int, int>					numDiceRollAttemptsMadeByTeam	
	array<ItemFlavor> 				requiredLegendFlavs
	array<ItemFlavor> 				forbiddenLegendFlavs		
	int 							repeatType
	float 							rarity
	bool 							allLegendsRequired
	array<string>					exclusiveConversations		
	float							activationTime



}

struct
{
	table < string, AmbientConversationData > ambDialogMap
	table < entity, array<void functionref( entity, entity )> > triggerCallbackMap
	table < entity, array<int> > triggerUsedBySquadMap
	table < int, array<string> > excludedConversationsForSquad		
	table < string, array<entity> > convoTriggerMap 
} file

void function ShAmbientDialogue_Init()
{
	if ( !GetCurrentPlaylistVarBool( "ambient_dialogue_enabled", true ) )
	{
		Warning( "WARNING! Ambient dialogue disabled!" )
		return
	}






	
	RegisterAmbientDialogueConversations( $"datatable/ambient_dialogue.rpak" )




}

void function RegisterAmbientDialogueConversations( asset dt )
{
	var dataTable = GetDataTable( dt )

	int columnName              = GetDataTableColumnByName( dataTable, "name" )
	int columnMapName           = GetDataTableColumnByName( dataTable, "map" )
	int columnTriggerScriptName = GetDataTableColumnByName( dataTable, "trigger" )
	int columnConversationName  = GetDataTableColumnByName( dataTable, "conversation" )
	int columnSpeakingLegend    = GetDataTableColumnByName( dataTable, "speakLegend" )
	int columnRequiredLegend    = GetDataTableColumnByName( dataTable, "reqLegends" )
	int columnForbiddenLegend   = GetDataTableColumnByName( dataTable, "forbidLegends" )
	int columnRarityOverride    = GetDataTableColumnByName( dataTable, "rarityOverride" )
	int columnOrder             = GetDataTableColumnByName( dataTable, "order" )
	int columnRepeatType        = GetDataTableColumnByName( dataTable, "repeatType" )
	int columnAllLegendsReqd    = GetDataTableColumnByName( dataTable, "allSpeakersRequired" )
	int columnMutuallyExclusive = GetDataTableColumnByName( dataTable, "mutualExclusiveConvos" )



	int columnActivationTimestamp = GetDataTableColumnByName ( dataTable, "activationTimestamp" )

	int numRows = GetDataTableRowCount( dataTable )
	string currentConversation = ""
	for ( int idx_row = 0; idx_row < numRows; idx_row++ )
	{
		string conversationName = GetDataTableString( dataTable, idx_row, columnConversationName )
		if ( conversationName != "" && currentConversation != conversationName )
		{
			AmbientConversationData newConversation

			newConversation.convoName = GetDataTableString( dataTable, idx_row, columnConversationName )
			string mapName =   GetDataTableString( dataTable, idx_row, columnMapName )
			if ( mapName == "" )
			{



				continue
			}


			if ( GetActiveLevel() != mapName )



			{
#if DEV
					if ( VERBOSE_PRINT_DEBUG )

						printt( "Skipping register ambient dialogue conversation " + GetDataTableString( dataTable, idx_row, columnName ) + " required map( " + mapName + ") != current map(" +  GetActiveLevel() + ")")



#endif
				continue
			}

			int activationTimestamp = GetDataTableInt( dataTable, idx_row, columnActivationTimestamp )
			int now = GetUnixTimestamp()
			if ( activationTimestamp > 0 && activationTimestamp > now)
			{
#if DEV
					if ( VERBOSE_PRINT_DEBUG )
						printt( "Skipping register ambient dialogue conversation " + GetDataTableString( dataTable, idx_row, columnName ) + " activation timestamp(" + activationTimestamp + ") < current time(" + now + ")specified is not active")
#endif
				continue
			}


			newConversation.triggerScriptName =   GetDataTableString( dataTable, idx_row, columnTriggerScriptName )
			
			
			
			
			
			
			

			array<string> requiredLegendRefs = split( GetDataTableString( dataTable, idx_row, columnRequiredLegend ), ";" )
			array<string> forbiddenLegendRefs = split( GetDataTableString( dataTable, idx_row, columnForbiddenLegend ), ";" )
			string speakingLegendRef = GetDataTableString( dataTable, idx_row, columnSpeakingLegend )
			if ( !requiredLegendRefs.contains( speakingLegendRef ) )
			{



				continue
			}

			if ( requiredLegendRefs.len() == 0 )
			{



				continue
			}

			array<ItemFlavor> requiredLegendFlavs
			array<ItemFlavor> forbiddenLegendFlavs
			bool didErrorOccur

			
			didErrorOccur = AmbientDialogue_ProcessRefArray( requiredLegendFlavs, requiredLegendRefs, forbiddenLegendRefs, GetDataTableString( dataTable, idx_row, columnName ) )
			didErrorOccur = AmbientDialogue_ProcessRefArray( forbiddenLegendFlavs, forbiddenLegendRefs, requiredLegendRefs, GetDataTableString( dataTable, idx_row, columnName ) ) ? true : didErrorOccur

			
			if ( didErrorOccur )
				continue

			newConversation.requiredLegendFlavs = requiredLegendFlavs
			newConversation.forbiddenLegendFlavs = forbiddenLegendFlavs

			newConversation.repeatType 			= GetDataTableInt( dataTable, idx_row, columnRepeatType )

			
			newConversation.rarity  = GetDataTableFloat( dataTable, idx_row, columnRarityOverride )
			string rarityOverridePlaylistVar = format( "amb_diag_rarity_override_%s", conversationName )
			float rarityPlaylistOverride = GetCurrentPlaylistVarFloat( rarityOverridePlaylistVar, -1.0 )
			if ( rarityPlaylistOverride >= 0 )
				newConversation.rarity = rarityPlaylistOverride

			newConversation.allLegendsRequired = GetDataTableBool( dataTable, idx_row, columnAllLegendsReqd )

			newConversation.exclusiveConversations = split( GetDataTableString( dataTable, idx_row, columnMutuallyExclusive ), ";" )





			int curOrder = -1
			
			for( int idx_rowsWithinConvo = idx_row; idx_rowsWithinConvo < numRows; idx_rowsWithinConvo++ )
			{
				string newConvoName = GetDataTableString( dataTable, idx_rowsWithinConvo, columnConversationName )
				if ( newConvoName != "" && conversationName != newConvoName )
				{
					
					idx_row = idx_rowsWithinConvo - 1
					break
				}

				
				int order               = GetDataTableInt( dataTable, idx_rowsWithinConvo, columnOrder )
				if ( order > curOrder )
				{
					AmbientDialogueData newDialogue
					newDialogue.eventName 			= GetDataTableString( dataTable, idx_rowsWithinConvo, columnName )
					newDialogue.speakingLegendFlav 	= GetCharacterFlavorFromTableName( GetDataTableString( dataTable, idx_rowsWithinConvo, columnSpeakingLegend ) )
					newConversation.convoSequence.append( newDialogue )
					curOrder = order
				}
				else if ( order <= curOrder )
				{
					Warning( "Warning! Incorrect order while parsing a conversation. Order should always go up. Event name: %s, Current order: %i, Attempted new order: %i", GetDataTableString( dataTable, idx_row, columnName ), curOrder, order )
				}
			}


			file.ambDialogMap[ conversationName ] <- newConversation
		}
	}
}












bool function AmbientDialogue_ProcessRefArray( array<ItemFlavor> arrayToPopulate, array<string> refArray, array<string> mutuallyExclusiveRefArray, string convoNameForDebug )
{
	bool didErrorOccur = false
	foreach( string ref in refArray )
	{
		if( mutuallyExclusiveRefArray.contains( ref ) )
		{



			didErrorOccur = true
			continue
		}












		arrayToPopulate.append( GetCharacterFlavorFromTableName( ref ) )
	}

	return didErrorOccur
}
















































































































































































ItemFlavor function GetCharacterFlavorFromTableName( string dtName )
{
	return GetItemFlavorByCharacterRef( "character_" + dtName )
}

entity function GetSpeakingPlayerInSquadForAmbientDialogue( AmbientDialogueData data, array<entity> squad )
{
	foreach( entity player in squad )
	{
		ItemFlavor playerLegendFlav = LoadoutSlot_GetItemFlavor( ToEHI( player ), Loadout_Character() )
		if ( playerLegendFlav == data.speakingLegendFlav )
			return player
	}

	unreachable
}













































































































































































array<AmbientConversationData> function GetAllAmbientDialogue()
{

		if (file.ambDialogMap.len() < 1)
			ShAmbientDialogue_Init()


	array<AmbientConversationData> result = []
	foreach ( key, val in file.ambDialogMap)
	{
		result.append(val)
	}
	return result
}








































































































































































































