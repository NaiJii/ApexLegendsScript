 


global function ShStats_LevelInit


global function CurrentModeSupportsCustomStats
global function CurrentModeIsSurvival



























































































































































































































































































global function ArenasRanked_GetHistoricalPeakLadderPosition
global function ArenasRanked_GetHistoricalPeakHighScore


















struct
{




} file

struct FileStruct_LifetimeLevel
{
	table<string, table<string, bool> > weaponStatCategoryWeaponItemRefSet

	table< string, int > botQueueGraduationRequirements















}
FileStruct_LifetimeLevel& fileLevel


const array<string> ARENAS_RANKED_PERIODS_REFS = [ "SAID00926519318", 
 "SAID00781342567", 
 "SAID00170407135", 
 "SAID00224037796", 
 "SAID00310546825", 
 "SAID00058416642", 
]







void function ShStats_LevelInit()
{

		PIN_Init()


	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	RegisterAllStats()












	BotsQueueGraduationStatsInit()




































}




void function BotsQueueGraduationStatsInit()
{

	
	var gradReqsTable = GetDataTable( $"datatable/new_player_graduation_requirements.rpak" )
	int rowCount      = GetDataTableRowCount( gradReqsTable )

	
	int col_StatRef = GetDataTableColumnByName( gradReqsTable, "statRef" )
	int col_gradValue = GetDataTableColumnByName( gradReqsTable, "graduationValue" )

	for( int i = 0; i < rowCount; ++i )
	{
		string statRef = GetDataTableString( gradReqsTable, i, col_StatRef )
		fileLevel.botQueueGraduationRequirements[ statRef ] <- GetDataTableInt( gradReqsTable, i, col_gradValue )
	}
}





void function RegisterAllStats()
{
	array<string> allCharacterRefs = []
	foreach ( characterRef in GetAllCharacterGUIDStringsForStats() )
		allCharacterRefs.append( characterRef )

	array<string> allWeaponsRefs               = []
	array<string> allLootWeaponStatsCategories = []
	foreach ( ItemFlavor weapon in GetAllWeaponItemFlavors() )
	{
		string weaponRef = ItemFlavor_GetGUIDString( weapon )
		allWeaponsRefs.append( weaponRef )
		string category = WeaponItemFlavor_GetStatsCategory( weapon )

		bool isGold = (category == WEAPON_STAT_CATEGORY_CRATE_WEAPON)






		if ( isGold )
		{
			string goldStatsCategory = WeaponCategoryFlavor_GetStatsKey( WeaponItemFlavor_GetCategory( weapon ) )
			if ( !(goldStatsCategory in fileLevel.weaponStatCategoryWeaponItemRefSet) )
			{
				fileLevel.weaponStatCategoryWeaponItemRefSet[goldStatsCategory] <- {}
				allLootWeaponStatsCategories.append( goldStatsCategory )
			}
			fileLevel.weaponStatCategoryWeaponItemRefSet[goldStatsCategory][weaponRef] <- true
		}

		if ( !(category in fileLevel.weaponStatCategoryWeaponItemRefSet) )
		{
			fileLevel.weaponStatCategoryWeaponItemRefSet[category] <- {}
			allLootWeaponStatsCategories.append( category )
		}
		fileLevel.weaponStatCategoryWeaponItemRefSet[category][weaponRef] <- true
	}

	array<string> allSeasonRefs = []
	foreach ( ItemFlavor season in GetAllSeasonFlavors() )
	{
		allSeasonRefs.append( ItemFlavor_GetGUIDString( season ) )
	}

	array<string> allRankedPeriodRefs = []
	array<ItemFlavor> allRankedPeriods = GetAllRankedPeriodCalEventFlavorsByType( eItemType.calevent_rankedperiod )
	allRankedPeriods.extend( Ranked_GetAllRanked2Pt0Periods() )

	foreach ( ItemFlavor rankedPeriod in allRankedPeriods )
	{
		allRankedPeriodRefs.append( ItemFlavor_GetGUIDString( rankedPeriod ) )
	}

	
	array<string> allArenasRankedPeriodRefs = []
	array<ItemFlavor> allArenasRankedPeriods = GetAllRankedPeriodCalEventFlavorsByType( eItemType.calevent_arenas_ranked_period )
	foreach ( ItemFlavor arenasRankedPeriod in allArenasRankedPeriods )
	{
		allArenasRankedPeriodRefs.append( ItemFlavor_GetGUIDString( arenasRankedPeriod ) )
	}

	CAREER_STATS.account_level = RegisterExpensiveCalculatedStat_Int( null, "account_level", BADGES_UNLOCK_NEED, SetupGetAccountLevelForStat, [], eChallengeGameMode.NON_MODE )
	CAREER_STATS.total_legendary_items = RegisterCachedCalculatedStat_Int( null, "total_legendary_items", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetTotalLegendaryItemsForStat, [], eChallengeGameMode.NON_MODE )
	CAREER_STATS.num_characters_with_banners_once_filled = RegisterCachedCalculatedStat_Int( null, "num_characters_with_banners_once_filled", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetNumCharactersWithBannersOnceFilledForStat, [], eChallengeGameMode.NON_MODE )
	CAREER_STATS.ea_access_member = RegisterExpensiveCalculatedStat_Int( null, "ea_access_member", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetEAAccessStatusForStat, [], eChallengeGameMode.NON_MODE )
	CAREER_STATS.fashionista = RegisterCachedCalculatedStat_Int( null, "fashionista", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetCountOfCharactersWithLegendarySkinAndExecutionForStat, [], eChallengeGameMode.NON_MODE )
	CAREER_STATS.weapons_with_legendary_skin = RegisterCachedCalculatedStat_Int( null, "weapons_with_legendary_skin", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetCountOfWeaponsWithLegendarySkinsForStat, [], eChallengeGameMode.NON_MODE )
	CAREER_STATS.well_rounded = RegisterCachedCalculatedStat_Int( null, "well_rounded", BADGES_UNLOCK_NEED, SetupGetCountOfCharactersWithWellRoundedDamageForStat, [], eChallengeGameMode.BATTLE_ROYALE )
	CAREER_STATS.looted_all_launch_loot_once = RegisterCachedCalculatedStat_Int( null, "looted_all_launch_loot_once", BADGES_UNLOCK_NEED, SetupGetTreasureHunterStatusForStat, [], eChallengeGameMode.BATTLE_ROYALE )
	CAREER_STATS.master_of_all = RegisterCachedCalculatedStat_Int( null, "master_of_all", BADGES_UNLOCK_NEED, SetupGetCountOfCharactersWithTenWinsForStat, [], eChallengeGameMode.BATTLE_ROYALE )
	CAREER_STATS.starter_pack = RegisterExpensiveCalculatedStat_Int( null, "starter_pack_owner", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetStarterPackStatusForStat, [], eChallengeGameMode.NON_MODE )
	CAREER_STATS.founder_pack = RegisterExpensiveCalculatedStat_Int( null, "founder_pack_owner", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetFounderPackStatusForStat, [], eChallengeGameMode.NON_MODE )
	CAREER_STATS.twitch_pack = RegisterExpensiveCalculatedStat_Int( null, "twitch_pack_owner", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetTwitchPackStatusForStat, [], eChallengeGameMode.NON_MODE )

	CAREER_STATS.respawn_dev = RegisterAccumulatedStat_Int( null, "respawn_dev", eChallengeGameMode.NON_MODE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.times_fully_kitted = RegisterAccumulatedStat_Int( null, "times_fully_kitted", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.distance_kill = RegisterAccumulatedStat_Int( null, "distance_kill", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )

	
	
	CAREER_STATS.times_jumpmaster = RegisterAccumulatedStat_Int( null, "times_jumpmaster", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.times_jumpmaster_post_fix = RegisterAccumulatedStat_Int( null, "times_jumpmaster_post_fix", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.looted_all_nongold_weapons_in_1_match = RegisterAccumulatedStat_Int( null, "looted_all_nongold_weapons_in_1_match", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.valentines_revives_and_respawns = RegisterAccumulatedStat_Int( null, "valentines_revives_and_respawns", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )

	CAREER_STATS.looted_epic_item = RegisterAccumulatedStat_Int( null, "looted_epic_item", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.looted_legendary_item = RegisterAccumulatedStat_Int( null, "looted_legendary_item", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.looted_legendary_helmet = RegisterAccumulatedStat_Int( null, "looted_legendary_helmet", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.looted_legendary_armor = RegisterAccumulatedStat_Int( null, "looted_legendary_armor", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )

	CAREER_STATS.daily_challenges_completed = RegisterAccumulatedStat_Int( null, "daily_challenges_completed", eChallengeGameMode.NON_MODE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.challenge_xp_earned = RegisterAccumulatedStat_Int( null, "challenge_xp_earned", eChallengeGameMode.NON_MODE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.challenge_stars_earned = RegisterAccumulatedStat_Int( null, "challenge_stars_earned", eChallengeGameMode.NON_MODE, CHALLENGES_CALC_DEPENDS )

	CAREER_STATS.thanks = RegisterAccumulatedStat_Int( null, "thanks", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.dooms = RegisterAccumulatedStat_Int( null, "dooms", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.kills = RegisterAccumulatedStat_Int( null, "kills", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.assists = RegisterAccumulatedStat_Int( null, "assists", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.kills_or_assists = RegisterAccumulatedStat_Int( null, "kills_or_assists", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	
	CAREER_STATS.times_got_doomed = RegisterAccumulatedStat_Int( null, "times_got_doomed", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.deaths = RegisterAccumulatedStat_Int( null, "deaths", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	
	
	CAREER_STATS.times_respawned_ally = RegisterAccumulatedStat_Int( null, "times_respawned_ally", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.winning_kills = RegisterAccumulatedStat_Int( null, "winning_kills", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.win_streak_longest = RegisterAccumulatedStat_Int( null, "win_streak_longest", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.win_streak_current = RegisterVariableStat_Int( null, "win_streak_current", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.win_streak_account_badge_current = RegisterVariableStat_Int( null, "win_streak_account_badge_current", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.win_streak_account_badge_longest = RegisterVariableStat_Int( null, "win_streak_account_badge_longest", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.kills_while_killleader = RegisterAccumulatedStat_Int( null, "kills_while_killleader", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.kills_max_single_game = RegisterAccumulatedStat_Int( null, "kills_max_single_game", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.damage_done = RegisterAccumulatedStat_Int( null, "damage_done", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.damage_done_midair = RegisterAccumulatedStat_Int( null, "damage_done_midair", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.damage_taken = RegisterAccumulatedStat_Int( null, "damage_taken", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.shots = RegisterAccumulatedStat_Int( null, "shots", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.hits = RegisterAccumulatedStat_Int( null, "hits", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.headshots = RegisterAccumulatedStat_Int( null, "headshots", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.executions = RegisterAccumulatedStat_Int( null, "executions", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.revived_ally = RegisterAccumulatedStat_Int( null, "revived_ally", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.respawned_ally = RegisterAccumulatedStat_Int( null, "respawned_ally", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.games_played = RegisterAccumulatedStat_Int( null, "games_played", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.placements_win = RegisterAccumulatedStat_Int( null, "placements_win", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.placements_win_with_squad_alive = RegisterAccumulatedStat_Int( null, "placements_win_with_squad_alive", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.placements_top_3 = RegisterAccumulatedStat_Int( null, "placements_top_3", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.placements_top_5 = RegisterAccumulatedStat_Int( null, "placements_top_5", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.placements_top_10 = RegisterAccumulatedStat_Int( null, "placements_top_10", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.placements_win_with_friends = RegisterAccumulatedStat_Int( null, "placements_win_with_friends", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.placements_win_with_no_witnessess = RegisterAccumulatedStat_Int( null, "placements_win_with_no_witnessess", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.placements_win_with_min_executions_per_person = RegisterAccumulatedStat_Int( null, "placements_win_with_min_executions_per_person", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.max_placement_win_streak_with_premade_squad = RegisterAccumulatedStat_Int( null, "max_placement_win_streak_with_premade_squad", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.team_work_kill_count = RegisterAccumulatedStat_Int( null, "team_work_kill_count", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.neutral_airdrops_looted = RegisterAccumulatedStat_Int( null, "neutral_airdrops_looted", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.damage_done_to_prowler_on_storm_point = RegisterAccumulatedStat_Int( null, "damage_done_to_prowler_on_storm_point", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.damage_done_to_spider_on_storm_point  = RegisterAccumulatedStat_Int( null, "damage_done_to_spider_on_storm_point", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )

	CAREER_STATS.games_played_any_mode = RegisterAccumulatedStat_Int( null, "games_played_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.dooms_any_mode = RegisterAccumulatedStat_Int( null, "dooms_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )

	StatEnumStruct weapon_SES = RegisterStatEnumStruct( null, "weapons", "eWeaponFlavor", allWeaponsRefs )
	CAREER_STATS.weapon_kills = RegisterAccumulatedStat_Int( weapon_SES, "kills", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.weapon_dooms = RegisterAccumulatedStat_Int( weapon_SES, "dooms", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.weapon_damage_done = RegisterAccumulatedStat_Int( weapon_SES, "damage_done", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.weapon_shots = RegisterAccumulatedStat_Int( weapon_SES, "shots", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.weapon_hits = RegisterAccumulatedStat_Int( weapon_SES, "hits", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.weapon_headshots = RegisterAccumulatedStat_Int( weapon_SES, "headshots", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )

	StatEnumStruct character_SES = RegisterStatEnumStruct( null, "characters", "eCharacterFlavor", allCharacterRefs )
	CAREER_STATS.character_kills = RegisterAccumulatedStat_Int( character_SES, "kills", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.character_dooms = RegisterAccumulatedStat_Int( character_SES, "dooms", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.character_deaths = RegisterAccumulatedStat_Int( character_SES, "deaths", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.character_winning_kills = RegisterAccumulatedStat_Int( character_SES, "winning_kills", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.character_kills_while_killleader = RegisterAccumulatedStat_Int( character_SES, "kills_while_killleader", eChallengeGameMode.BATTLE_ROYALE, TRACKERS_NEED )
	CAREER_STATS.character_damage_done = RegisterAccumulatedStat_Int( character_SES, "damage_done", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.character_damage_done_any_mode = RegisterAccumulatedStat_Int( character_SES, "damage_done_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.character_damage_done_max_single_game = RegisterAccumulatedStat_Int( character_SES, "character_damage_done_max_single_game", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.character_shots = RegisterAccumulatedStat_Int( character_SES, "shots", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.character_hits = RegisterAccumulatedStat_Int( character_SES, "hits", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.character_headshots = RegisterAccumulatedStat_Int( character_SES, "headshots", eChallengeGameMode.BATTLE_ROYALE, TRACKERS_NEED )
	CAREER_STATS.character_executions = RegisterAccumulatedStat_Int( character_SES, "executions", eChallengeGameMode.BATTLE_ROYALE, TRACKERS_NEED )
	CAREER_STATS.character_revived_ally = RegisterAccumulatedStat_Int( character_SES, "revived_ally", eChallengeGameMode.BATTLE_ROYALE, TRACKERS_NEED )
	CAREER_STATS.character_games_played = RegisterAccumulatedStat_Int( character_SES, "games_played", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.character_games_played_any_mode = RegisterAccumulatedStat_Int( character_SES, "games_played_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.character_games_with_5_kills = RegisterAccumulatedStat_Int( character_SES, "games_with_5_kills", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.character_games_with_20_kills = RegisterAccumulatedStat_Int( character_SES, "games_with_20_kills", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.character_games_with_respawning_both_teammates = RegisterAccumulatedStat_Int( character_SES, "character_games_with_respawning_both_teammates", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.character_rapid_eliminations = RegisterAccumulatedStat_Int( character_SES, "character_rapid_eliminations", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.character_most_squad_squad_kills_in_1_game = RegisterAccumulatedStat_Int( character_SES, "most_squad_squad_kills_in_1_game", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.character_placements_win = RegisterAccumulatedStat_Int( character_SES, "placements_win", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.character_placements_win_with_squad_alive = RegisterAccumulatedStat_Int( character_SES, "placements_win_with_squad_alive", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.character_placements_top_3 = RegisterAccumulatedStat_Int( character_SES, "placements_top_3", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.character_placements_win_as_jumpmaster = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_as_jumpmaster", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.character_placements_win_as_killleader = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_as_killleader", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.character_placements_win_as_killleader_and_champion = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_as_killleader_and_champion", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.character_placements_win_flawless_1 = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_flawless_1", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.character_placements_win_flawless_2 = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_flawless_2", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.character_placements_win_with_5_headshots = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_with_5_headshots", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )

	
	CAREER_STATS.character_won_last_game = RegisterVariableStat_Int( character_SES, "character_won_last_game", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.character_hot_streaks = RegisterAccumulatedStat_Int( character_SES, "character_hot_streaks", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.character_reinforcement_recalls = RegisterAccumulatedStat_Int( character_SES, "character_reinforcement_recalls", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.character_banner_once_filled = RegisterAccumulatedStat_Int( character_SES, "character_banner_once_filled", eChallengeGameMode.NON_MODE, DELAY_WRITE_BACK_UNTIL_MATCH_END )

	CAREER_STATS.character_neutral_airdrops_looted = RegisterAccumulatedStat_Int( character_SES, "neutral_airdrops_looted", eChallengeGameMode.ANY, DELAY_WRITE_BACK_UNTIL_MATCH_END )

	StatEnumStruct character_weaponcategory_SES = RegisterStatEnumStruct( character_SES, "weaponcategories", "eWeaponStatCategory", allLootWeaponStatsCategories )

	CAREER_STATS.character_weaponcategory_kills = RegisterAccumulatedStat_Int( character_weaponcategory_SES, "kills", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.character_weaponcategory_dooms = RegisterAccumulatedStat_Int( character_weaponcategory_SES, "dooms", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.character_weaponcategory_damage_done = RegisterAccumulatedStat_Int( character_weaponcategory_SES, "damage_done", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.character_weaponcategory_shots = RegisterAccumulatedStat_Int( character_weaponcategory_SES, "shots", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.character_weaponcategory_hits = RegisterAccumulatedStat_Int( character_weaponcategory_SES, "hits", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.character_weaponcategory_headshots = RegisterAccumulatedStat_Int( character_weaponcategory_SES, "headshots", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )

	StatTemplate temp_statTemplateReference 

	StatEnumStruct modes_SES = RegisterStatEnumStruct( null, "modes", "eModesFlavors", STATS_ALTERNATE_MODE_REFS )
	CAREER_STATS.modes_games_played = RegisterAccumulatedStat_Int( modes_SES, "games_played", MODE_SPECIFIC, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.modes_kills = RegisterAccumulatedStat_Int( modes_SES, "kills", MODE_SPECIFIC, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.modes_assists = RegisterAccumulatedStat_Int( modes_SES, "assists", MODE_SPECIFIC, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.modes_kills_or_assists = RegisterAccumulatedStat_Int( modes_SES, "kills_or_assists", MODE_SPECIFIC, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.modes_executions = RegisterAccumulatedStat_Int( modes_SES, "executions", MODE_SPECIFIC, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.modes_deaths = RegisterAccumulatedStat_Int( modes_SES, "deaths", MODE_SPECIFIC, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.modes_dooms = RegisterAccumulatedStat_Int( modes_SES, "dooms", MODE_SPECIFIC, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.modes_damage_done = RegisterAccumulatedStat_Int( modes_SES, "damage_done", MODE_SPECIFIC, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.modes_placements_win = RegisterAccumulatedStat_Int( modes_SES, "placements_win", MODE_SPECIFIC, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.modes_headshots = RegisterAccumulatedStat_Int( modes_SES, "headshots", MODE_SPECIFIC, CHALLENGES_CALC_DEPENDS )
	
	CAREER_STATS.modes_kills_max_single_game = RegisterAccumulatedStat_Int( modes_SES, "kills_max_single_game", MODE_SPECIFIC, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.modes_damage_done_max_single_game = RegisterAccumulatedStat_Int( modes_SES, "damage_done_max_single_game", MODE_SPECIFIC, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.modes_win_streak_current = RegisterVariableStat_Int( modes_SES, "win_streak_current", MODE_SPECIFIC, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.modes_win_streak_longest = RegisterAccumulatedStat_Int( modes_SES, "win_streak_longest", MODE_SPECIFIC, BADGES_UNLOCK_NEED )
	CAREER_STATS.modes_revived_ally = RegisterAccumulatedStat_Int( modes_SES, "revived_ally", MODE_SPECIFIC, CHALLENGES_CALC_DEPENDS )


	StatEnumStruct modes_season_SES = RegisterStatEnumStruct( modes_SES, "seasons", "eSeasonFlavor", allSeasonRefs )
	CAREER_STATS.modes_season_games_played = RegisterAccumulatedStat_Int( modes_season_SES, "games_played", MODE_SPECIFIC, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.modes_season_kills = RegisterAccumulatedStat_Int( modes_season_SES, "kills", MODE_SPECIFIC, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.modes_season_assists = RegisterAccumulatedStat_Int( modes_season_SES, "assists", MODE_SPECIFIC, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.modes_season_deaths = RegisterAccumulatedStat_Int( modes_season_SES, "deaths", MODE_SPECIFIC, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.modes_season_dooms = RegisterAccumulatedStat_Int( modes_season_SES, "dooms", MODE_SPECIFIC, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.modes_season_damage_done = RegisterAccumulatedStat_Int( modes_season_SES, "damage_done", MODE_SPECIFIC, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.modes_season_placements_win = RegisterAccumulatedStat_Int( modes_season_SES, "placements_win", MODE_SPECIFIC, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	
	CAREER_STATS.modes_season_kills_max_single_game = RegisterAccumulatedStat_Int( modes_season_SES, "kills_max_single_game", MODE_SPECIFIC, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.modes_season_damage_done_max_single_game = RegisterAccumulatedStat_Int( modes_season_SES, "damage_done_max_single_game", MODE_SPECIFIC, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.modes_season_win_streak_current = RegisterVariableStat_Int( modes_season_SES, "win_streak_current", MODE_SPECIFIC, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.modes_season_win_streak_longest = RegisterAccumulatedStat_Int( modes_season_SES, "win_streak_longest", MODE_SPECIFIC, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.modes_season_revived_ally = RegisterAccumulatedStat_Int( modes_season_SES, "revived_ally", MODE_SPECIFIC, DELAY_WRITE_BACK_UNTIL_MATCH_END )

	StatEnumStruct modes_characters_SES = RegisterStatEnumStruct( modes_SES, "characters", "eCharacterFlavor", allCharacterRefs )
	CAREER_STATS.modes_character_games_played = RegisterAccumulatedStat_Int( modes_characters_SES, "games_played", MODE_SPECIFIC, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.modes_character_damage_done = RegisterAccumulatedStat_Int( modes_characters_SES, "damage_done", MODE_SPECIFIC, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.modes_character_kills = RegisterAccumulatedStat_Int( modes_characters_SES, "kills", MODE_SPECIFIC, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.modes_character_dooms = RegisterAccumulatedStat_Int( modes_characters_SES, "dooms", MODE_SPECIFIC, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.modes_character_deaths = RegisterAccumulatedStat_Int( modes_characters_SES, "deaths", MODE_SPECIFIC, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.modes_character_placements_win = RegisterAccumulatedStat_Int( modes_characters_SES, "placements_win", MODE_SPECIFIC, CHALLENGES_CALC_DEPENDS )

	StatEnumStruct modes_weapon_SES = RegisterStatEnumStruct( modes_SES, "weapons", "eWeaponFlavor", allWeaponsRefs )
	CAREER_STATS.modes_weapon_damage_done = RegisterAccumulatedStat_Int( modes_weapon_SES, "damage_done", MODE_SPECIFIC, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.modes_weapon_dooms = RegisterAccumulatedStat_Int( modes_weapon_SES, "dooms", MODE_SPECIFIC, CHALLENGES_CALC_DEPENDS )





	StatEnumStruct modes_weaponcategory_SES = RegisterStatEnumStruct( modes_SES, "weaponcategories", "eWeaponStatCategory", allLootWeaponStatsCategories )
	temp_statTemplateReference                    = CAREER_STATS.modes_weapon_damage_done
	CAREER_STATS.modes_weaponcategory_damage_done = RegisterExpensiveCalculatedStat_Int( modes_weaponcategory_SES, "damage_done", CHALLENGES_CALC_DEPENDS,
		SetupModesWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference], MODE_SPECIFIC )
	temp_statTemplateReference                    = CAREER_STATS.modes_weapon_dooms
	CAREER_STATS.modes_weaponcategory_dooms       = RegisterExpensiveCalculatedStat_Int( modes_weaponcategory_SES, "dooms", CHALLENGES_CALC_DEPENDS,
		SetupModesWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference], MODE_SPECIFIC )





















	
	CAREER_STATS.arenas_badge_perfect_game = RegisterAccumulatedStat_Int( null, "arenas_badge_perfect_game", eChallengeGameMode.ARENAS, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.arenas_badge_no_down_win = RegisterAccumulatedStat_Int( null, "arenas_badge_no_down_win", eChallengeGameMode.ARENAS, BADGES_UNLOCK_NEED ) 

	CAREER_STATS.arenas_rounds_won = RegisterAccumulatedStat_Int( null, "arenas_rounds_won", eChallengeGameMode.ARENAS, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.arenas_cash_stations_captured = RegisterAccumulatedStat_Int( null, "arenas_cash_stations_captured", eChallengeGameMode.ARENAS, CHALLENGES_CALC_DEPENDS )

	CAREER_STATS.arenas_character_win_streak_current_new = RegisterVariableStat_Int( character_SES, "arenas_character_win_streak_current_new", eChallengeGameMode.ARENAS, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.arenas_character_win_streak_longest_new = RegisterAccumulatedStat_Int( character_SES, "arenas_character_win_streak_longest_new", eChallengeGameMode.ARENAS, BADGES_UNLOCK_NEED )
	CAREER_STATS.arenas_character_kills_max_single_game = RegisterAccumulatedStat_Int( character_SES, "arenas_character_kills_max_single_game", eChallengeGameMode.ARENAS, BADGES_UNLOCK_NEED )
	CAREER_STATS.arenas_character_damage_done_max_single_game = RegisterAccumulatedStat_Int( character_SES, "arenas_character_damage_done_max_single_game", eChallengeGameMode.ARENAS, BADGES_UNLOCK_NEED )
	CAREER_STATS.arenas_character_rounds_won = RegisterAccumulatedStat_Int( character_SES, "arenas_character_rounds_won", eChallengeGameMode.ARENAS, CHALLENGES_CALC_DEPENDS )

	CAREER_STATS.arenas_skills_purchased = RegisterAccumulatedStat_Int( null, "arenas_skills_purchased", eChallengeGameMode.ARENAS, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.arenas_ordnance_purchased = RegisterAccumulatedStat_Int( null, "arenas_ordnance_purchased", eChallengeGameMode.ARENAS, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.arenas_heals_purchased = RegisterAccumulatedStat_Int( null, "arenas_heals_purchased", eChallengeGameMode.ARENAS, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.arenas_weapons_upgraded = RegisterAccumulatedStat_Int( null, "arenas_weapons_upgraded", eChallengeGameMode.ARENAS, CHALLENGES_CALC_DEPENDS )

	
	CAREER_STATS.crafting_items_crafted = RegisterAccumulatedStat_Int( null, "items_crafted", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.crafting_materials_collected = RegisterAccumulatedStat_Int( null, "materials_collected", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.crafting_harvester_used_any_mode = RegisterAccumulatedStat_Int( null, "crafting_harvester_used_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )

	StatEnumStruct weaponcategory_SES = RegisterStatEnumStruct( null, "weaponcategories", "eWeaponStatCategory", allLootWeaponStatsCategories )

	
	
	temp_statTemplateReference        = CAREER_STATS.character_weaponcategory_kills
	CAREER_STATS.weaponcategory_kills = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "kills", CHALLENGES_CALC_DEPENDS,
		SetupWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.BATTLE_ROYALE )

	temp_statTemplateReference        = CAREER_STATS.character_weaponcategory_dooms
	CAREER_STATS.weaponcategory_dooms = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "dooms", CHALLENGES_CALC_DEPENDS,
		SetupWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.BATTLE_ROYALE )

	temp_statTemplateReference              = CAREER_STATS.character_weaponcategory_damage_done
	CAREER_STATS.weaponcategory_damage_done = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "damage_done", CHALLENGES_CALC_DEPENDS,
		SetupWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.BATTLE_ROYALE )

	temp_statTemplateReference            = CAREER_STATS.character_weaponcategory_headshots
	CAREER_STATS.weaponcategory_headshots = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "headshots", CHALLENGES_CALC_DEPENDS,
		SetupWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.BATTLE_ROYALE )

	
	
	StatTemplate tempOne = CAREER_STATS.character_weaponcategory_damage_done
	StatTemplate tempTwo = CAREER_STATS.modes_weapon_damage_done
	CAREER_STATS.weaponcategory_damage_done_any_mode = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "damage_done_any_mode", CHALLENGES_CALC_DEPENDS,
		SetupAnyModeWeaponCategoryStatSumEntryFunc_Int, [tempOne, tempTwo], eChallengeGameMode.ANY )

	
	temp_statTemplateReference                        = CAREER_STATS.modes_games_played
	CAREER_STATS.all_modes_games_played               = RegisterExpensiveCalculatedStat_Int( null, "games_played_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )
	temp_statTemplateReference                        = CAREER_STATS.modes_damage_done
	CAREER_STATS.all_modes_damage_done                = RegisterExpensiveCalculatedStat_Int( null, "damage_done_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )
	temp_statTemplateReference                        = CAREER_STATS.modes_placements_win
	CAREER_STATS.all_modes_placements_win             = RegisterExpensiveCalculatedStat_Int( null, "placements_win_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )
	temp_statTemplateReference                        = CAREER_STATS.modes_kills
	CAREER_STATS.all_modes_kills                      = RegisterExpensiveCalculatedStat_Int( null, "kills_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )
	temp_statTemplateReference                        = CAREER_STATS.modes_assists
	CAREER_STATS.all_modes_assists                    = RegisterExpensiveCalculatedStat_Int( null, "assists_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )
	temp_statTemplateReference                        = CAREER_STATS.modes_kills_or_assists
	CAREER_STATS.all_modes_kills_or_assists           = RegisterExpensiveCalculatedStat_Int( null, "kills_or_assists_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )
	temp_statTemplateReference                        = CAREER_STATS.modes_deaths
	CAREER_STATS.all_modes_deaths                     = RegisterExpensiveCalculatedStat_Int( null, "deaths_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )
	temp_statTemplateReference                        = CAREER_STATS.modes_dooms
	CAREER_STATS.all_modes_dooms                      = RegisterExpensiveCalculatedStat_Int( null, "dooms_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )
	temp_statTemplateReference                        = CAREER_STATS.modes_executions
	CAREER_STATS.all_modes_executions                 = RegisterExpensiveCalculatedStat_Int( null, "executions_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )
	temp_statTemplateReference                        = CAREER_STATS.modes_headshots
	CAREER_STATS.all_modes_headshots                  = RegisterExpensiveCalculatedStat_Int( null, "headshots_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )
	temp_statTemplateReference                        = CAREER_STATS.modes_revived_ally
	CAREER_STATS.all_modes_revived_ally               = RegisterExpensiveCalculatedStat_Int( null, "revived_ally_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )
	temp_statTemplateReference                        = CAREER_STATS.modes_weapon_damage_done
	CAREER_STATS.all_modes_weaponcategory_damage_done = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "damage_done_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )
	temp_statTemplateReference                        = CAREER_STATS.modes_weapon_dooms
	CAREER_STATS.all_modes_weaponcategory_dooms       = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "dooms_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRWeaponCategoryStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )
	temp_statTemplateReference                        = CAREER_STATS.modes_character_games_played
	CAREER_STATS.all_modes_character_games_played     = RegisterExpensiveCalculatedStat_Int( character_SES, "games_played_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRCharacterStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )
	temp_statTemplateReference                        = CAREER_STATS.modes_character_damage_done
	CAREER_STATS.all_modes_character_damage_done      = RegisterExpensiveCalculatedStat_Int( character_SES, "damage_done_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRCharacterStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )
	temp_statTemplateReference                        = CAREER_STATS.modes_character_kills
	CAREER_STATS.all_modes_character_kills            = RegisterExpensiveCalculatedStat_Int( character_SES, "kills_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRCharacterStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )
	temp_statTemplateReference                        = CAREER_STATS.modes_character_dooms
	CAREER_STATS.all_modes_character_dooms            = RegisterExpensiveCalculatedStat_Int( character_SES, "dooms_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRCharacterStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )
	temp_statTemplateReference                        = CAREER_STATS.modes_character_placements_win
	CAREER_STATS.all_modes_character_placements_win   = RegisterExpensiveCalculatedStat_Int( character_SES, "placements_win_all_modes_non_br", CHALLENGES_CALC_DEPENDS,
		SetupModesExceptBRCharacterStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXCEPT_BR )

	CAREER_STATS.evoarmor_evolves = RegisterAccumulatedStat_Int( null, "evoarmor_evolves", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.evoarmor_evolves_to_purple = RegisterAccumulatedStat_Int( null, "evoarmor_evolves_to_purple", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )

	CAREER_STATS.voidring_damage_prevented = RegisterAccumulatedStat_Int( null, "voidring_damage_prevented", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )

	CAREER_STATS.bloodhound_tactical_enemies_detected = RegisterAccumulatedStat_Int( null, "bloodhound_tactical_enemies_detected", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.bloodhound_tactical_traps_detected = RegisterAccumulatedStat_Int( null, "bloodhound_tactical_traps_detected", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.bloodhound_ultimate_kills_while_active = RegisterAccumulatedStat_Int( null, "bloodhound_ultimate_kills_while_active", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.caustic_tactical_barrels_traps_detonated = RegisterAccumulatedStat_Int( null, "caustic_tactical_barrels_traps_detonated", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.caustic_gas_damage_dealt = RegisterAccumulatedStat_Int( null, "caustic_gas_damage_dealt", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.caustic_passive_enemies_in_gas_killed = RegisterAccumulatedStat_Int( null, "caustic_passive_enemies_in_gas_killed", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.crypto_passive_enemies_scanned = RegisterAccumulatedStat_Int( null, "crypto_passive_enemies_scanned", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.crypto_ultimate_shield_damage = RegisterAccumulatedStat_Int( null, "crypto_ultimate_shield_damage", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.crypto_ultimate_traps_destroyed = RegisterAccumulatedStat_Int( null, "crypto_ultimate_traps_destroyed", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.gibraltar_tactical_bubble_enemy_damage_absorbed = RegisterAccumulatedStat_Int( null, "gibraltar_tactical_bubble_enemy_damage_absorbed", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.gibraltar_ultimate_bombardment_kills = RegisterAccumulatedStat_Int( null, "gibraltar_ultimate_bombardment_kills", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.gibraltar_passive_gunshield_enemy_damage_absorbed = RegisterAccumulatedStat_Int( null, "gibraltar_passive_gunshield_enemy_damage_absorbed", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.lifeline_tactical_drone_healing_given = RegisterAccumulatedStat_Int( null, "lifeline_tactical_drone_healing_given", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.lifeline_ultimate_droppod_items_grabbed_by_allies = RegisterAccumulatedStat_Int( null, "lifeline_ultimate_droppod_items_grabbed_by_allies", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.lifeline_passive_enemy_damage_absorbed = RegisterAccumulatedStat_Int( null, "lifeline_passive_enemy_damage_absorbed", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.lifeline_passive_allies_revived = RegisterAccumulatedStat_Int( null, "lifeline_passive_allies_revived", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.loba_tactical_meters_teleported = RegisterAccumulatedStat_Int( null, "loba_tactical_meters_teleported", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.loba_ultimate_loot_taken_by_allies = RegisterAccumulatedStat_Int( null, "loba_ultimate_loot_taken_by_allies", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.loba_passive_loot_pinged_through_walls = RegisterAccumulatedStat_Int( null, "loba_passive_loot_pinged_through_walls", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.mirage_decoys_created = RegisterAccumulatedStat_Int( null, "mirage_decoys_created", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.mirage_successful_bamboozles = RegisterAccumulatedStat_Int( null, "mirage_successful_bamboozles", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.mirage_successful_revives = RegisterAccumulatedStat_Int( null, "mirage_successful_revives", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.octane_stim_distance_traveled = RegisterAccumulatedStat_Int( null, "octane_stim_distance_traveled", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.octane_jump_pad_allies_launched = RegisterAccumulatedStat_Int( null, "octane_jump_pad_allies_launched", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.octane_passive_health_regenerated = RegisterAccumulatedStat_Int( null, "octane_passive_health_regenerated", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.pathfinder_tactical_meters_moved_by_grapple = RegisterAccumulatedStat_Int( null, "pathfinder_tactical_meters_moved_by_grapple", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.pathfinder_ultimate_ziplines_used_by_allies = RegisterAccumulatedStat_Int( null, "pathfinder_ultimate_ziplines_used_by_allies", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.pathfinder_passive_beacons_scanned = RegisterAccumulatedStat_Int( null, "pathfinder_passive_beacons_scanned", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.recon_passive_beacons_scanned = RegisterAccumulatedStat_Int( null, "recon_passive_beacons_scanned", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.rampart_tactical_bullets_amped = RegisterAccumulatedStat_Int( null, "rampart_tactical_bullets_amped", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.rampart_tactical_damage_blocked = RegisterAccumulatedStat_Int( null, "rampart_tactical_damage_blocked", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.rampart_ultimate_bullets_fired = RegisterAccumulatedStat_Int( null, "rampart_ultimate_bullets_fired", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.wattson_breaches_detected = RegisterAccumulatedStat_Int( null, "wattson_breaches_detected", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.wattson_friendly_shields_charged = RegisterAccumulatedStat_Int( null, "wattson_friendly_shields_charged", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.wattson_enemy_ordnance_intercepted = RegisterAccumulatedStat_Int( null, "wattson_enemy_ordnance_intercepted", eChallengeGameMode.ANY, TRACKERS_NEED )
	CAREER_STATS.wraith_ultimate_phase_tunnel_ally_uses = RegisterAccumulatedStat_Int( null, "wraith_ultimate_phase_tunnel_ally_uses", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.wraith_passive_voices_heard = RegisterAccumulatedStat_Int( null, "wraith_passive_voices_heard", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.wraith_tactical_time_spent_in_phase = RegisterAccumulatedStat_Int( null, "wraith_tactical_time_spent_in_phase", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.bangalore_passive_distance = RegisterAccumulatedStat_Int( null, "bangalore_passive_distance", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.bangalore_tactical_smoke_hits = RegisterAccumulatedStat_Int( null, "bangalore_tactical_smoke_hits", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.bangalore_ultimate_damage_done = RegisterAccumulatedStat_Int( null, "bangalore_ultimate_damage_done", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.revenant_silenced_target = RegisterAccumulatedStat_Int( null, "revenant_silenced_target", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.revenant_silenced_target_knockdowns = RegisterAccumulatedStat_Int( null, "revenant_silenced_target_knockdowns", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.revenant_death_totem_activates = RegisterAccumulatedStat_Int( null, "revenant_death_totem_activates", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.horizon_hard_landings_avoided = RegisterAccumulatedStat_Int( null, "horizon_hard_landings_avoided", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.horizon_teammates_gravity_lifted = RegisterAccumulatedStat_Int( null, "horizon_teammates_gravity_lifted", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.horizon_blackhole_damage_done = RegisterAccumulatedStat_Int( null, "horizon_blackhole_damage_done", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )

	CAREER_STATS.fuse_grenade_distance_thrown = RegisterAccumulatedStat_Int( null, "fuse_grenade_distance_thrown", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.fuse_cluster_bomb_hits = RegisterAccumulatedStat_Int( null, "fuse_cluster_bomb_hits", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.fuse_motherlode_enemies_captured = RegisterAccumulatedStat_Int( null, "fuse_motherlode_enemies_captured", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )

	CAREER_STATS.valk_distance_travelled_passive = RegisterAccumulatedStat_Int( null, "valk_distance_travelled_passive", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.valk_enemies_hit_tactical = RegisterAccumulatedStat_Int( null, "valk_enemies_hit_tactical", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.valk_teammates_carried_ult = RegisterAccumulatedStat_Int( null, "valk_teammates_carried_ult", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )

	CAREER_STATS.seer_enemy_heartbeats_heard = RegisterAccumulatedStat_Int( null, "seer_enemy_heartbeats_heard", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.seer_focus_of_attention_hits = RegisterAccumulatedStat_Int( null, "seer_focus_of_attention_hits", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.seer_exhibit_enemies_inside = RegisterAccumulatedStat_Int( null, "seer_exhibit_enemies_inside", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )

	CAREER_STATS.ash_enemies_marked = RegisterAccumulatedStat_Int( null, "ash_enemies_marked", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.ash_enemies_tethered = RegisterAccumulatedStat_Int( null, "ash_enemies_tethered", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.ash_players_portaled = RegisterAccumulatedStat_Int( null, "ash_players_portaled", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )

	CAREER_STATS.maggie_riot_drill_drill_distance = RegisterAccumulatedStat_Int( null, "maggie_riot_drill_drill_distance", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.maggie_wrecking_ball_boost_distance = RegisterAccumulatedStat_Int( null, "maggie_wrecking_ball_boost_distance", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.maggie_warlords_ire_highlight_time = RegisterAccumulatedStat_Int( null, "maggie_warlords_ire_highlight_time", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )

	CAREER_STATS.newcastle_revive_distance = RegisterAccumulatedStat_Int( null, "newcastle_revive_distance", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.newcastle_mobile_shield_damage = RegisterAccumulatedStat_Int( null, "newcastle_mobile_shield_damage", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.newcastle_allies_rescued = RegisterAccumulatedStat_Int( null, "newcastle_allies_rescued", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )

	CAREER_STATS.vantage_tactical_distance = RegisterAccumulatedStat_Int( null, "vantage_tactical_distance", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.vantage_ultimate_damage = RegisterAccumulatedStat_Int( null, "vantage_ultimate_damage", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.vantage_passive_enemies_pinged = RegisterAccumulatedStat_Int( null, "vantage_passive_enemies_pinged", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.vantage_ultimate_marked_hits = RegisterAccumulatedStat_Int( null, "vantage_ultimate_marked_hits", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS ) 


		CAREER_STATS.conduit_boosted_distance = RegisterAccumulatedStat_Int( null, "conduit_boosted_distance", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.conduit_temp_shields_applied = RegisterAccumulatedStat_Int( null, "conduit_temp_shields_applied", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.conduit_ult_damage = RegisterAccumulatedStat_Int( null, "conduit_ult_damage", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )



		CAREER_STATS.ballistic_passive_sling_kills = RegisterAccumulatedStat_Int( null, "ballistic_passive_sling_kills", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.ballistic_tactical_enemies_overheated = RegisterAccumulatedStat_Int( null, "ballistic_tactical_enemies_overheated", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.ballistic_ultimate_damage = RegisterAccumulatedStat_Int( null, "ballistic_ultimate_damage", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.ballistic_tactical_enemies_hit = RegisterAccumulatedStat_Int( null, "ballistic_tactical_enemies_hit", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )


	CAREER_STATS.catalyst_doors_barricaded = RegisterAccumulatedStat_Int( null, "catalyst_doors_barricaded", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.catalyst_spikes_damage = RegisterAccumulatedStat_Int( null, "catalyst_spikes_damage", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.catalyst_dark_veil_enemies_crossed = RegisterAccumulatedStat_Int( null, "catalyst_dark_veil_enemies_crossed", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )


		
		CAREER_STATS.revenant_unlock_passive_marked_enemies = RegisterAccumulatedStat_Int( null, "revenant_unlock_passive_marked_enemies", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.revenant_unlock_tactical_distance = RegisterAccumulatedStat_Int( null, "revenant_unlock_tactical_distance", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.revenant_unlock_ultimate_knocks_kills = RegisterAccumulatedStat_Int( null, "revenant_unlock_ultimate_knocks_kills", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )

		
		CAREER_STATS.revenant_passive_marked_enemies = RegisterAccumulatedStat_Int( null, "revenant_passive_marked_enemies", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.revenant_tactical_distance = RegisterAccumulatedStat_Int( null, "revenant_tactical_distance", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.revenant_ultimate_knocks_kills = RegisterAccumulatedStat_Int( null, "revenant_ultimate_knocks_kills", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )



		CAREER_STATS.assault_games_played = RegisterAccumulatedStat_Int( null, "assault_games_played", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.skirmisher_games_played = RegisterAccumulatedStat_Int( null, "skirmisher_games_played", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.recon_games_played = RegisterAccumulatedStat_Int( null, "recon_games_played", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.controller_games_played = RegisterAccumulatedStat_Int( null, "controller_games_played", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.support_games_played = RegisterAccumulatedStat_Int( null, "support_games_played", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )

		CAREER_STATS.weapon_supply_bins_looted = RegisterAccumulatedStat_Int( null, "weapon_supply_bins_looted", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.care_packages_revealed = RegisterAccumulatedStat_Int( null, "care_packages_revealed", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.ring_consoles_used = RegisterAccumulatedStat_Int( null, "ring_consoles_used", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.extended_supply_bins_looted = RegisterAccumulatedStat_Int( null, "extended_supply_bins_looted", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )

		CAREER_STATS.weapon_supply_bin_epics_looted = RegisterAccumulatedStat_Int( null, "weapon_supply_bin_epics_looted", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.revealed_care_packages_looted = RegisterAccumulatedStat_Int( null, "revealed_care_packages_looted", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.beacon_scanned_squads_killed = RegisterAccumulatedStat_Int( null, "beacon_scanned_squads_killed", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.scanned_ring_locations_reached = RegisterAccumulatedStat_Int( null, "scanned_ring_locations_reached", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.respawn_banners_crafted = RegisterAccumulatedStat_Int( null, "respawn_banners_crafted", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )






	StatEnumStruct season_SES = RegisterStatEnumStruct( null, "seasons", "eSeasonFlavor", allSeasonRefs )
	CAREER_STATS.season_battlepass_level = RegisterCachedCalculatedStat_Int( season_SES, "battlepass_level", BADGES_UNLOCK_NEED, SetupGetSeasonBattlePassLevelForStat, [], eChallengeGameMode.NON_MODE )

	StatEnumStruct season_character_SES = RegisterStatEnumStruct( season_SES, "characters", "eCharacterFlavor", allCharacterRefs )
	CAREER_STATS.season_character_damage_done = RegisterAccumulatedStat_Int( season_character_SES, "damage_done", eChallengeGameMode.BATTLE_ROYALE, TRACKERS_NEED )
	CAREER_STATS.season_character_kills = RegisterAccumulatedStat_Int( season_character_SES, "kills", eChallengeGameMode.BATTLE_ROYALE, TRACKERS_NEED )
	CAREER_STATS.season_character_placements_win = RegisterAccumulatedStat_Int( season_character_SES, "placements_win", eChallengeGameMode.BATTLE_ROYALE, TRACKERS_NEED )
	CAREER_STATS.season_character_placements_top_5 = RegisterAccumulatedStat_Int( season_character_SES, "placements_top_5", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )

	
	
	CAREER_STATS.season_kills_with_7_characters = RegisterAccumulatedStat_Int( season_SES, "kills_with_7_characters", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.season_placements_wins_with_7_characters = RegisterAccumulatedStat_Int( season_SES, "placements_wins_with_7_characters", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.season_placements_top_5_with_7_characters = RegisterAccumulatedStat_Int( season_SES, "placements_top_5_with_7_characters", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.season_battlepass_bonus_xp_with_7_characters = RegisterAccumulatedStat_Int( season_SES, "battlepass_bonus_xp_with_7_characters", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	

	
	CAREER_STATS.season_games_played = RegisterAccumulatedStat_Int( season_SES, "games_played", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.season_placements_win = RegisterAccumulatedStat_Int( season_SES, "placements_win", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.season_damage_done = RegisterAccumulatedStat_Int( season_SES, "damage_done", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.season_kills = RegisterAccumulatedStat_Int( season_SES, "kills", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.season_deaths = RegisterAccumulatedStat_Int( season_SES, "deaths", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.season_dooms = RegisterAccumulatedStat_Int( season_SES, "dooms", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.season_team_work_kill_count = RegisterAccumulatedStat_Int( season_SES, "team_work_kill_count", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.season_revived_ally = RegisterAccumulatedStat_Int( season_SES, "revived_ally", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.season_times_respawned_ally = RegisterAccumulatedStat_Int( season_SES, "times_respawned_ally", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.season_character_damage_done_max_single_game = RegisterAccumulatedStat_Int( season_character_SES, "character_damage_done_max_single_game", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.season_assists = RegisterAccumulatedStat_Int( season_SES, "assists", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.season_kills_max_single_game = RegisterAccumulatedStat_Int( season_SES, "kills_max_single_game", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.season_win_streak_longest = RegisterAccumulatedStat_Int( season_SES, "win_streak_longest", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.season_win_streak_current = RegisterVariableStat_Int( season_SES, "win_streak_current", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )

	CAREER_STATS.elite_badge_unlock = RegisterAccumulatedStat_Int( null, "elite_badge_unlock", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.character_elite_game_wins = RegisterAccumulatedStat_Int( character_SES, "character_elite_game_wins", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.character_elite_game_8kill_wins = RegisterAccumulatedStat_Int( character_SES, "character_elite_game_8kill_wins", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.elite_888_badge_unlock = RegisterExpensiveCalculatedStat_Int( null, "elite_888_badge_unlock", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetElite888StatusForStat, [], eChallengeGameMode.EXPIRED )

	CAREER_STATS.loot_bins = RegisterAccumulatedStat_Int( null, "loot_bins_opened", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.opponents_outlived = RegisterAccumulatedStat_Int( null, "opponents_outlived", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.survival_time_seconds = RegisterAccumulatedStat_Int( null, "survival_time_seconds", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )

	CAREER_STATS.season01_event_placements_top_5 = RegisterAccumulatedStat_Int( null, "season01_event_placements_top_5", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )

	

	StatEnumStruct rankedperiod_SES = RegisterStatEnumStruct( null, "rankedperiods", "eRankedStatPeriod", allRankedPeriodRefs )
	CAREER_STATS.rankedperiod_games_played = RegisterAccumulatedStat_Int( rankedperiod_SES, "games_played", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.rankedperiod_placements_win = RegisterAccumulatedStat_Int( rankedperiod_SES, "placements_win", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.rankedperiod_placements_top_5 = RegisterAccumulatedStat_Int( rankedperiod_SES, "placements_top_5", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.rankedperiod_placements_top_10 = RegisterAccumulatedStat_Int( rankedperiod_SES, "placements_top_10", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.rankedperiod_damage_done = RegisterAccumulatedStat_Int( rankedperiod_SES, "damage_done", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.rankedperiod_kills = RegisterAccumulatedStat_Int( rankedperiod_SES, "kills", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.rankedperiod_deaths = RegisterAccumulatedStat_Int( rankedperiod_SES, "deaths", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.rankedperiod_dooms = RegisterAccumulatedStat_Int( rankedperiod_SES, "dooms", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.rankedperiod_revived_ally = RegisterAccumulatedStat_Int( rankedperiod_SES, "revived_ally", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.rankedperiod_times_respawned_ally = RegisterAccumulatedStat_Int( rankedperiod_SES, "times_respawned_ally", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.rankedperiod_assists = RegisterAccumulatedStat_Int( rankedperiod_SES, "assists", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.rankedperiod_kills_max_single_game = RegisterAccumulatedStat_Int( rankedperiod_SES, "kills_max_single_game", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.rankedperiod_win_streak_longest = RegisterAccumulatedStat_Int( rankedperiod_SES, "win_streak_longest", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.rankedperiod_win_streak_current = RegisterVariableStat_Int( rankedperiod_SES, "win_streak_current", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.rankedperiod_current_rank_score = RegisterVariableStat_Int( rankedperiod_SES, "current_rank_score", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.rankedperiod_badge_award_level = RegisterVariableStat_Int( rankedperiod_SES, "badge_award_level", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.rankedperiod_gained_rank_score_only = RegisterAccumulatedStat_Int( rankedperiod_SES, "gained_rank_score_only", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )

	StatEnumStruct rankedperiod_character_SES = RegisterStatEnumStruct( rankedperiod_SES, "characters", "eCharacterFlavor", allCharacterRefs )
	CAREER_STATS.rankedperiod_character_damage_done_max_single_game = RegisterAccumulatedStat_Int( rankedperiod_character_SES, "character_damage_done_max_single_game", eChallengeGameMode.BATTLE_ROYALE, DELAY_WRITE_BACK_UNTIL_MATCH_END )

	
	StatEnumStruct arenasRankedperiod_SES = RegisterStatEnumStruct( null, "arenasrankedperiods", "eArenasRankedPeriodFlavor", allArenasRankedPeriodRefs )
	CAREER_STATS.arenas_rankedperiod_games_played = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "games_played", eChallengeGameMode.ARENAS, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.arenas_rankedperiod_current_rank_score = RegisterVariableStat_Int( arenasRankedperiod_SES, "current_rank_score", eChallengeGameMode.ARENAS, BADGES_UNLOCK_NEED )
	CAREER_STATS.arenas_rankedperiod_badge_award_level = RegisterVariableStat_Int( arenasRankedperiod_SES, "badge_award_level", eChallengeGameMode.ARENAS, BADGES_UNLOCK_NEED )
	CAREER_STATS.arenas_rankedperiod_gained_rank_score_only = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "gained_rank_score_only", eChallengeGameMode.ARENAS, BADGES_UNLOCK_NEED )

	
	CAREER_STATS.arenas_rankedperiod_placements_win = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "placements_win", eChallengeGameMode.ARENAS, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.arenas_rankedperiod_damage_done = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "damage_done", eChallengeGameMode.ARENAS, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.arenas_rankedperiod_damage_done_max_single_game = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "damage_done_max_single_game", eChallengeGameMode.ARENAS, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.arenas_rankedperiod_kills = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "kills", eChallengeGameMode.ARENAS, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.arenas_rankedperiod_deaths = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "deaths", eChallengeGameMode.ARENAS, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.arenas_rankedperiod_dooms = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "dooms", eChallengeGameMode.ARENAS, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.arenas_rankedperiod_assists = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "assists", eChallengeGameMode.ARENAS, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.arenas_rankedperiod_kills_max_single_game = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "kills_max_single_game", eChallengeGameMode.ARENAS, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.arenas_rankedperiod_win_streak_current_new = RegisterVariableStat_Int( arenasRankedperiod_SES, "win_streak_current_new", eChallengeGameMode.ARENAS, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.arenas_rankedperiod_win_streak_longest_new = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "win_streak_longest_new", eChallengeGameMode.ARENAS, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.arenas_rankedperiod_revived_ally = RegisterAccumulatedStat_Int( arenasRankedperiod_SES, "revived_ally", eChallengeGameMode.ARENAS, DELAY_WRITE_BACK_UNTIL_MATCH_END )

	
	temp_statTemplateReference = CAREER_STATS.arenas_rankedperiod_games_played
	CAREER_STATS.arenas_rankedcareer_games_played = RegisterExpensiveCalculatedStat_Int( null, "arenas_rankedcareer_games_played", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupRankedArenasCareerFlattenerFunc_Int, [temp_statTemplateReference], eChallengeGameMode.ARENAS )
	temp_statTemplateReference = CAREER_STATS.arenas_rankedperiod_placements_win
	CAREER_STATS.arenas_rankedcareer_placements_win = RegisterExpensiveCalculatedStat_Int( null, "arenas_rankedcareer_placements_win", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupRankedArenasCareerFlattenerFunc_Int, [temp_statTemplateReference], eChallengeGameMode.ARENAS )
	temp_statTemplateReference = CAREER_STATS.arenas_rankedperiod_damage_done
	CAREER_STATS.arenas_rankedcareer_damage_done = RegisterExpensiveCalculatedStat_Int( null, "arenas_rankedcareer_damage_done", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupRankedArenasCareerFlattenerFunc_Int, [temp_statTemplateReference], eChallengeGameMode.ARENAS )
	temp_statTemplateReference = CAREER_STATS.arenas_rankedperiod_damage_done_max_single_game
	CAREER_STATS.arenas_rankedcareer_damage_done_max_single_game = RegisterExpensiveCalculatedStat_Int( null, "arenas_rankedcareer_damage_done_max_single_game", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupRankedArenasCareerFindMaxFunc_Int, [temp_statTemplateReference], eChallengeGameMode.ARENAS )
	temp_statTemplateReference = CAREER_STATS.arenas_rankedperiod_kills
	CAREER_STATS.arenas_rankedcareer_kills = RegisterExpensiveCalculatedStat_Int( null, "arenas_rankedcareer_kills", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupRankedArenasCareerFlattenerFunc_Int, [temp_statTemplateReference], eChallengeGameMode.ARENAS )
	temp_statTemplateReference = CAREER_STATS.arenas_rankedperiod_deaths
	CAREER_STATS.arenas_rankedcareer_deaths = RegisterExpensiveCalculatedStat_Int( null, "arenas_rankedcareer_deaths", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupRankedArenasCareerFlattenerFunc_Int, [temp_statTemplateReference], eChallengeGameMode.ARENAS )
	temp_statTemplateReference = CAREER_STATS.arenas_rankedperiod_kills_max_single_game
	CAREER_STATS.arenas_rankedcareer_kills_max_single_game = RegisterExpensiveCalculatedStat_Int( null, "arenas_rankedcareer_kills_max_single_game", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupRankedArenasCareerFindMaxFunc_Int, [temp_statTemplateReference], eChallengeGameMode.ARENAS )
	temp_statTemplateReference = CAREER_STATS.arenas_rankedperiod_dooms
	CAREER_STATS.arenas_rankedcareer_dooms = RegisterExpensiveCalculatedStat_Int( null, "arenas_rankedcareer_dooms", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupRankedArenasCareerFlattenerFunc_Int, [temp_statTemplateReference], eChallengeGameMode.ARENAS )
	temp_statTemplateReference = CAREER_STATS.arenas_rankedperiod_assists
	CAREER_STATS.arenas_rankedcareer_assists = RegisterExpensiveCalculatedStat_Int( null, "arenas_rankedcareer_assists", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupRankedArenasCareerFlattenerFunc_Int, [temp_statTemplateReference], eChallengeGameMode.ARENAS )
	temp_statTemplateReference = CAREER_STATS.arenas_rankedperiod_win_streak_longest_new
	CAREER_STATS.arenas_rankedcareer_win_streak_longest = RegisterExpensiveCalculatedStat_Int( null, "arenas_rankedcareer_win_streak_longest", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupRankedArenasCareerFindMaxFunc_Int, [temp_statTemplateReference], eChallengeGameMode.ARENAS )
	temp_statTemplateReference = CAREER_STATS.arenas_rankedperiod_revived_ally
	CAREER_STATS.arenas_rankedcareer_revived_ally = RegisterExpensiveCalculatedStat_Int( null, "arenas_rankedcareer_revived_ally", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupRankedArenasCareerFlattenerFunc_Int, [temp_statTemplateReference], eChallengeGameMode.ARENAS )

	CAREER_STATS.character_solo_dooms = RegisterAccumulatedStat_Int( character_SES, "solo_dooms", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.character_solo_placements_top_5 = RegisterAccumulatedStat_Int( character_SES, "character_solo_placements_top_5", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.character_solo_wins = RegisterAccumulatedStat_Int( character_SES, "character_solo_wins", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )

	temp_statTemplateReference = CAREER_STATS.character_solo_dooms
	CAREER_STATS.solo_dooms    = RegisterExpensiveCalculatedStat_Int( null, "solo_dooms", DELAY_WRITE_BACK_UNTIL_MATCH_END,
		SetupCharacterStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXPIRED )

	temp_statTemplateReference         = CAREER_STATS.character_solo_placements_top_5
	CAREER_STATS.solo_placements_top_5 = RegisterExpensiveCalculatedStat_Int( null, "solo_placements_top_5", DELAY_WRITE_BACK_UNTIL_MATCH_END,
		SetupCharacterStatSumEntryFunc_Int, [temp_statTemplateReference], eChallengeGameMode.EXPIRED )

	CAREER_STATS.season02_event01_top5s_badge = RegisterAccumulatedStat_Int( null, "season02_event01_top5s_badge", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END ) 
	CAREER_STATS.season02_event01_character_solo_wins = RegisterAccumulatedStat_Int( character_SES, "season02_event01_character_solo_wins", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.season02_event01_num_characters_with_solo_win = RegisterExpensiveCalculatedStat_Int( null, "season02_event01_num_characters_with_solo_win", DELAY_WRITE_BACK_UNTIL_MATCH_END,
		SetupGetNumSoloWinsWithAllCharactersIronCrown, [], eChallengeGameMode.EXPIRED )

	CAREER_STATS.s03e01_badge = RegisterAccumulatedStat_Int( null, "s03e01_badge", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s03e02_winter_express_captures = RegisterAccumulatedStat_Int( null, "s03e02_winter_express_captures", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )

	CAREER_STATS.s03_duos_badge_play = RegisterAccumulatedStat_Int( null, "s03_duos_badge_play", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s03_duos_badge_win = RegisterAccumulatedStat_Int( null, "s03_duos_badge_win", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s03_duos_tiers_earned = RegisterExpensiveCalculatedStat_Int( null, "s03_duos_tiers_earned", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetDuosTiersEarned, [], eChallengeGameMode.EXPIRED )

	CAREER_STATS.s03e03_buffet_points = RegisterAccumulatedStat_Int( null, "s03e03_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s03e03_play_each_game_mode = RegisterAccumulatedStat_Int( null, "s03e03_play_each_game_mode", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s03e03_placement_top_5 = RegisterAccumulatedStat_Int( null, "s03e03_placement_top_5", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )

	CAREER_STATS.s04e01_buffet_points = RegisterAccumulatedStat_Int( null, "s04e01_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s04e02_buffet_points = RegisterAccumulatedStat_Int( null, "s04e02_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )

	CAREER_STATS.s05e01_buffet_points = RegisterAccumulatedStat_Int( null, "s05e01_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s05e01_armed_and_dangerous_evolved_kills = RegisterAccumulatedStat_Int( null, "s05e01_armed_and_dangerous_evolved_kills", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s05e01_armed_and_dangerous_evolved_wins = RegisterAccumulatedStat_Int( null, "s05e01_armed_and_dangerous_evolved_wins", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s05e01_armed_and_dangerous_evolved_times_respawned_ally = RegisterAccumulatedStat_Int( null, "s05e01_armed_and_dangerous_evolved_times_respawned_ally", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s05e01_armed_and_dangerous_evolved_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s05e01_armed_and_dangerous_evolved_combined_badge_earned", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetArmedAndDangerousEvolvedCombinedBadgeEarned, [], eChallengeGameMode.EXPIRED )

	CAREER_STATS.s06e01_buffet_points = RegisterAccumulatedStat_Int( null, "s06e01_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s06e01_campfire_damage_dealt_in_zone = RegisterAccumulatedStat_Int( null, "s06e01_campfire_damage_dealt_in_zone", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s06e01_campfire_players_killed_in_zone = RegisterAccumulatedStat_Int( null, "s06e01_campfire_players_killed_in_zone", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s06e01_campfire_wins = RegisterAccumulatedStat_Int( null, "s06e01_campfire_wins", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s06e01_campfire_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s06e01_campfire_combined_badge_earned", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetCampfireCombinedBadgeEarned, [], eChallengeGameMode.EXPIRED )

	CAREER_STATS.s06e02_buffet_points = RegisterAccumulatedStat_Int( null, "s06e02_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s06e02_shadow_royale_kills = RegisterAccumulatedStat_Int( null, "s06e02_shadow_royale_kills", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s06e02_shadow_royale_revives = RegisterAccumulatedStat_Int( null, "s06e02_shadow_royale_revives", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s06e02_shadow_royale_wins = RegisterAccumulatedStat_Int( null, "s06e02_shadow_royale_wins", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s06e02_shadow_royale_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s06e02_shadow_royale_combined_badge_earned", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetShadowRoyaleCombinedBadgeEarned, [], eChallengeGameMode.EXPIRED )

	CAREER_STATS.s07e01_buffet_points = RegisterAccumulatedStat_Int( null, "s07e01_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s07e01_winter_express_captures = RegisterAccumulatedStat_Int( null, "s07e01_winter_express_captures", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s07e01_winter_express_kills = RegisterAccumulatedStat_Int( null, "s07e01_winter_express_kills", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s07e01_winter_express_damage = RegisterAccumulatedStat_Int( null, "s07e01_winter_express_damage", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s07e01_winter_express_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s07e01_winter_express_combined_badge_earned", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetWinterExpressCombinedBadgeEarned, [], eChallengeGameMode.EXPIRED )

	CAREER_STATS.s07e02_buffet_points = RegisterAccumulatedStat_Int( null, "s07e02_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s07e02_airdropkitted_damage_dealt = RegisterAccumulatedStat_Int( null, "s07e02_airdropkitted_damage_dealt", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s07e02_airdropkitted_knockdowns = RegisterAccumulatedStat_Int( null, "s07e02_airdropkitted_knockdowns", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s07e02_airdropkitted_wins = RegisterAccumulatedStat_Int( null, "s07e02_airdropkitted_wins", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s07e02_airdropkitted_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s07e02_airdropkitted_combined_badge_earned", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetAirdropKittedCombinedBadgeEarned, [], eChallengeGameMode.EXPIRED )

	CAREER_STATS.s08ace_buffet_points = RegisterAccumulatedStat_Int( null, "s08ace_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )

	
	CAREER_STATS.s08seasonal_nessie_dailies = RegisterAccumulatedStat_Int( null, "s08seasonal_nessie_dailies", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s08seasonal_weapon_damage = RegisterAccumulatedStat_Int( null, "s08seasonal_weapon_damage", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s08seasonal_character_wins = RegisterAccumulatedStat_Int( null, "s08seasonal_character_wins", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s08seasonal_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s08seasonal_combined_badge_earned", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetS08SeasonalCombinedBadgeEarned, [], eChallengeGameMode.EXPIRED )

	
	CAREER_STATS.s08e01_buffet_points = RegisterAccumulatedStat_Int( null, "s08e01_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s08e01_ringfury_challenge_2 = RegisterAccumulatedStat_Int( null, "s08e01_ringfury_challenge_2", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s08e01_ringfury_challenge_3 = RegisterAccumulatedStat_Int( null, "s08e01_ringfury_challenge_3", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s08e01_ringfury_challenge_4 = RegisterAccumulatedStat_Int( null, "s08e01_ringfury_challenge_4", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s08e01_ringfury_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s08e01_ringfury_combined_badge_earned", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetRingFuryCombinedBadgeEarned, [], eChallengeGameMode.EXPIRED )

	
	CAREER_STATS.s08e02_buffet_points = RegisterAccumulatedStat_Int( null, "s08e02_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s08e02_wargames_challenge_2 = RegisterAccumulatedStat_Int( null, "s08e02_wargames_challenge_2", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s08e02_wargames_challenge_3 = RegisterAccumulatedStat_Int( null, "s08e02_wargames_challenge_3", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s08e02_wargames_challenge_4 = RegisterAccumulatedStat_Int( null, "s08e02_wargames_challenge_4", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s08e02_wargames_combined_badge_earned = RegisterExpensiveCalculatedStat_Int( null, "s08e02_wargames_combined_badge_earned", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetWarGamesCombinedBadgeEarned, [], eChallengeGameMode.EXPIRED )





	
	CAREER_STATS.s08e04_finale_completed = RegisterAccumulatedStat_Int( null, "s08e04_finale_completed", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s08e04_finale_not_completed = RegisterCachedCalculatedStat_Int( null, "s08e04_finale_not_completed", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetS08E04FinaleNotCompletedForStat, [], eChallengeGameMode.EXPIRED )

	
	CAREER_STATS.s09e01_buffet_points          = RegisterAccumulatedStat_Int( null, "s09e01_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s09e01_br_damage_done         = RegisterAccumulatedStat_Int( null, "s09e01_br_damage_done", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s09e01_arenas_placements_win  = RegisterAccumulatedStat_Int( null, "s09e01_arenas_placements_win", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s09e01_br_dooms               = RegisterAccumulatedStat_Int( null, "s09e01_br_dooms", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s09e01_combined_badge_earned  = RegisterExpensiveCalculatedStat_Int( null, "s09e01_combined_badge_earned", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetGenesisCombinedBadgeEarned, [], eChallengeGameMode.EXPIRED )

	
	CAREER_STATS.s09e02_01_arenas_matches_played = RegisterAccumulatedStat_Int( null, "s09e02_01_arenas_matches_played", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s09e02_02_arenas_dooms          = RegisterAccumulatedStat_Int( null, "s09e02_02_arenas_dooms", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s09e02_03_arenas_damage_done    = RegisterAccumulatedStat_Int( null, "s09e02_03_arenas_damage_done", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s09e02_01_buffet_points         = RegisterAccumulatedStat_Int( null, "s09e02_01_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s09e02_02_buffet_points         = RegisterAccumulatedStat_Int( null, "s09e02_02_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s09e02_03_buffet_points         = RegisterAccumulatedStat_Int( null, "s09e02_03_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )

	
	CAREER_STATS.s11e01_buffet_points              = RegisterAccumulatedStat_Int( null, "s11e01_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s11e01_winter_express_damage_done = RegisterAccumulatedStat_Int( null, "s11e01_winter_express_damage_done", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s11e01_arenas_damage_done         = RegisterAccumulatedStat_Int( null, "s11e01_arenas_damage_done", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s11e01_br_dooms                   = RegisterAccumulatedStat_Int( null, "s11e01_br_dooms", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s11e01_combined_badge_earned      = RegisterExpensiveCalculatedStat_Int( null, "s11e01_combined_badge_earned", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetRaidersCombinedBadgeEarned, [], eChallengeGameMode.EXPIRED )

	
	CAREER_STATS.s11e02_01_buffet_points         = RegisterAccumulatedStat_Int( null, "s11e02_01_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s11e02_02_buffet_points         = RegisterAccumulatedStat_Int( null, "s11e02_02_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s11e02_03_buffet_points         = RegisterAccumulatedStat_Int( null, "s11e02_03_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s11e02_01_br_dooms				 = RegisterAccumulatedStat_Int( null, "s11e02_01_br_dooms", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s11e02_02_arenas_games_played   = RegisterAccumulatedStat_Int( null, "s11e02_02_arenas_games_played", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s11e02_03_br_damage_done        = RegisterAccumulatedStat_Int( null, "s11e02_03_br_damage_done", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )

	
	CAREER_STATS.s12ace_buffet_points            = RegisterAccumulatedStat_Int( null, "s12ace_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s12ace_br_damage_done			 = RegisterAccumulatedStat_Int( null, "s12ace_br_damage_done", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s12ace_control_captures         = RegisterAccumulatedStat_Int( null, "s12ace_control_captures", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s12ace_br_dooms                 = RegisterAccumulatedStat_Int( null, "s12ace_br_dooms", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s12ace_combined_badge_earned    = RegisterExpensiveCalculatedStat_Int( null, "s12ace_combined_badge_earned", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetS12ACECombinedBadgeEarned, [], eChallengeGameMode.EXPIRED )

	
	CAREER_STATS.s12e01_buffet_points            = RegisterAccumulatedStat_Int( null, "s12e01_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s12e01_br_damage_done			 = RegisterAccumulatedStat_Int( null, "s12e01_br_damage_done", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s12e01_control_captures         = RegisterAccumulatedStat_Int( null, "s12e01_control_captures", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s12e01_br_dooms                 = RegisterAccumulatedStat_Int( null, "s12e01_br_dooms", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s12e01_combined_badge_earned    = RegisterExpensiveCalculatedStat_Int( null, "s12e01_combined_badge_earned", DELAY_WRITE_BACK_UNTIL_MATCH_END, SetupGetWarriorsCombinedBadgeEarned, [], eChallengeGameMode.EXPIRED )

	
	CAREER_STATS.s12e02_01_buffet_points         = RegisterAccumulatedStat_Int( null, "s12e02_01_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s12e02_02_buffet_points         = RegisterAccumulatedStat_Int( null, "s12e02_02_buffet_points", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s12e02_01_br_dooms              = RegisterAccumulatedStat_Int( null, "s12e02_01_br_dooms", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )
	CAREER_STATS.s12e02_02_br_damage_done        = RegisterAccumulatedStat_Int( null, "s12e02_02_br_damage_done", eChallengeGameMode.EXPIRED, DELAY_WRITE_BACK_UNTIL_MATCH_END )

	
	CAREER_STATS.s12e04_challenge_1            = RegisterAccumulatedStat_Int( null, "s12e04_challenge_1", eChallengeGameMode.NON_MODE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.s12e04_challenge_2            = RegisterAccumulatedStat_Int( null, "s12e04_challenge_2", eChallengeGameMode.NON_MODE, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.s12e04_challenge_3            = RegisterAccumulatedStat_Int( null, "s12e04_challenge_3", eChallengeGameMode.NON_MODE, CHALLENGES_CALC_DEPENDS )

	
	CAREER_STATS.s13_flash_01_buffet_points    = RegisterAccumulatedStat_Int( null, "s13_flash_01_buffet_points", eChallengeGameMode.NON_MODE, CHALLENGES_CALC_DEPENDS )


		CAREER_STATS.s17_eventrefactor_currency 			= RegisterAccumulatedStat_Int( null, "s17_eventrefactor_currency", eChallengeGameMode.NON_MODE, CHALLENGES_CALC_DEPENDS ) 


	
	

		CAREER_STATS.s19aw_event_currency_total = RegisterAccumulatedStat_Int( null, "s19aw_event_currency_total", eChallengeGameMode.NON_MODE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.s19aw_revives_any_mode = RegisterAccumulatedStat_Int( null, "s19aw_revives_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )



		CAREER_STATS.s19gh_event_currency_total = RegisterAccumulatedStat_Int( null, "s19gh_event_currency_total", eChallengeGameMode.NON_MODE, CHALLENGES_CALC_DEPENDS )

		CAREER_STATS.s19gh_games_played = RegisterAccumulatedStat_Int( null, "s19gh_games_played", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.s19gh_titan_sword_damage = RegisterAccumulatedStat_Int( null, "s19gh_titan_sword_damage", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.s19gh_titan_sword_kills = RegisterAccumulatedStat_Int( null, "s19gh_titan_sword_kills", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.s19gh_titan_sword_launcher = RegisterAccumulatedStat_Int( null, "s19gh_titan_sword_launcher", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.s19gh_titan_sword_supers = RegisterAccumulatedStat_Int( null, "s19gh_titan_sword_supers", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.s19gh_titan_sword_blocked = RegisterAccumulatedStat_Int( null, "s19gh_titan_sword_blocked", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.s19gh_hopup_red_summons = RegisterAccumulatedStat_Int( null, "s19gh_hopup_red_summons", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.s19gh_hopup_blue_healing = RegisterAccumulatedStat_Int( null, "s19gh_hopup_blue_healing", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.s19gh_hopup_green_damage = RegisterAccumulatedStat_Int( null, "s19gh_hopup_green_damage", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.s19gh_hopup_purple_damage = RegisterAccumulatedStat_Int( null, "s19gh_hopup_purple_damage", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.s19gh_hopup_yellow_time = RegisterAccumulatedStat_Int( null, "s19gh_hopup_yellow_time", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )


	
	

		CAREER_STATS.s19ce01_01_buffet_points = RegisterAccumulatedStat_Int( null, "s19ce01_01_buffet_points", eChallengeGameMode.NON_MODE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.s19ce01_02_buffet_points = RegisterAccumulatedStat_Int( null, "s19ce01_02_buffet_points", eChallengeGameMode.NON_MODE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.s19ce01_03_buffet_points = RegisterAccumulatedStat_Int( null, "s19ce01_03_buffet_points", eChallengeGameMode.NON_MODE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.s19ce01_04_buffet_points = RegisterAccumulatedStat_Int( null, "s19ce01_04_buffet_points", eChallengeGameMode.NON_MODE, CHALLENGES_CALC_DEPENDS )

		CAREER_STATS.s19ce01_wins_any_mode	  = RegisterAccumulatedStat_Int( null, "s19ce01_wins_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )


	








	
	CAREER_STATS.kills_with_red_weapons_any_mode = RegisterAccumulatedStat_Int( null, "kills_with_red_weapons_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.damage_with_red_weapons_any_mode = RegisterAccumulatedStat_Int( null, "damage_with_red_weapons_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
	CAREER_STATS.br_top_10_or_arena_win          = RegisterAccumulatedStat_Int( null, "br_top_10_or_arena_win", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.melee_damage_any_mode           = RegisterAccumulatedStat_Int( null, "melee_damage_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.kills_or_assists_any_mode       = RegisterAccumulatedStat_Int( null, "kills_or_assists_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.ring_closings_survived			 = RegisterAccumulatedStat_Int( null, "ring_closings_survived", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.health_restored_any_mode        = RegisterAccumulatedStat_Int( null, "health_restored_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.self_revives					 = RegisterAccumulatedStat_Int( null, "self_revives", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.executions_any_mode			 = RegisterAccumulatedStat_Int( null, "executions_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.damage_done_any_mode		 	 = RegisterAccumulatedStat_Int( null, "damage_done_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.top_3_with_3_kill_ko_assist	 = RegisterAccumulatedStat_Int( null, "top_3_with_3_kill_ko_assist", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.headshots_any_mode	 			 = RegisterAccumulatedStat_Int( null, "headshots_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.damage_done_first_ring_round_br = RegisterAccumulatedStat_Int( null, "damage_done_first_ring_round_br", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.damage_done_hipfire_any_mode    = RegisterAccumulatedStat_Int( null, "damage_done_hipfire_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.damage_done_ordnance_any_mode   = RegisterAccumulatedStat_Int( null, "damage_done_ordnance_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.evoarmor_evolves_to_red         = RegisterAccumulatedStat_Int( null, "evoarmor_evolves_to_red", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.arenas_win_with_5_kill_ko_assist = RegisterAccumulatedStat_Int( null, "arenas_win_with_5_kill_ko_assist", eChallengeGameMode.ARENAS, CHALLENGES_CALC_DEPENDS ) 

	
	CAREER_STATS.kills_with_throwing_knife_gungame = RegisterAccumulatedStat_Int( null, "kills_with_throwing_knife_gungame", eChallengeGameMode.GUNGAME, CHALLENGES_CALC_DEPENDS ) 

	CAREER_STATS.shield_restored = RegisterAccumulatedStat_Int( null, "shield_restored", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.mirror_legend_kills_any_mode = RegisterAccumulatedStat_Int( null, "mirror_legend_kills_any_mode", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.equipped_attachment = RegisterAccumulatedStat_Int( null, "equipped_attachment", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS ) 
	CAREER_STATS.character_placements_top_10 = RegisterAccumulatedStat_Int( character_SES, "placements_top_10", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS ) 

	CAREER_STATS.first_played_unixtime = RegisterExpensiveCalculatedStat_Int( null, "first_played_unixtime", TRACKERS_NEED, SetFirstPlayedUnixTime, [], eChallengeGameMode.NON_MODE )


		CAREER_STATS.hovervehicle_occupant_meters_traveled = RegisterAccumulatedStat_Int( null, "hovervehicle_occupant_meters_traveled", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )


	CAREER_STATS.clubs_games_played_with_club = RegisterAccumulatedStat_Int( null, "clubs_games_played_with_club", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.clubs_placements_win_with_club = RegisterAccumulatedStat_Int( null, "clubs_placements_win_with_club", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.clubs_placements_win_with_club_squad_alive = RegisterAccumulatedStat_Int( null, "clubs_placements_win_with_club_squad_alive", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.clubs_placements_win_with_club_streak = RegisterAccumulatedStat_Int( null, "clubs_placements_win_with_club_streak", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.clubs_placements_win_with_club_no_deaths = RegisterAccumulatedStat_Int( null, "clubs_placements_win_with_club_no_deaths", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	CAREER_STATS.clubs_placements_win_with_club_no_deaths_or_knockouts = RegisterAccumulatedStat_Int( null, "clubs_placements_win_with_club_no_deaths_or_knockouts", eChallengeGameMode.BATTLE_ROYALE, BADGES_UNLOCK_NEED )
	
	
	


		StatsRegister_Control()



		CAREER_STATS.slide_count = RegisterAccumulatedStat_Int( null, "slide_count", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.armor_upgaraded_count = RegisterAccumulatedStat_Int( null, "armor_upgaraded_count", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.doors_broken_by_melee = RegisterAccumulatedStat_Int( null, "doors_broken_by_melee", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.phoenix_kits_used = RegisterAccumulatedStat_Int( null, "phoenix_kits_used", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.beginner_distance_kill = RegisterAccumulatedStat_Int( null, "beginner_distance_kill", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )




















		CAREER_STATS.graduated_bot_queue = RegisterExpensiveCalculatedStat_Int( null, "graduated_bot_queue", TRACKERS_NEED, SetupGraduatedBotQueueStat, [], eChallengeGameMode.NON_MODE )

}

































bool function IsValidMapForStats()
{
	if ( IsSurvivalTraining() )
		return false

	if ( IsFiringRangeGameMode() )
		return false

	if ( IsLobby() )
		return false

	return true
}







































































































 bool function CurrentModeSupportsCustomStats()
 {
	 string mode = ""







	 {
	  	mode = GetCurrentPlaylistVarString( "stats_match_type", "survival" )
	 }

	 Assert( STATS_MATCH_TYPES.contains( mode ), "Invalid Playlist var stats_match_type " + mode )

	 return ( STATS_ALTERNATE_MODE_REFS.contains( mode ) )
 }

 bool function CurrentModeIsSurvival()
 {
	  string mode = ""






	 {
	  	mode = GetCurrentPlaylistVarString( "stats_match_type", "survival" )
	 }

	return mode == "survival" || mode == "duo" || mode == "ranked"
 }

 


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































StatCalcFuncInfo function SetupGetAccountLevelForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int xpProgress   = GetPlayerAccountXPProgress( ToEHI( player ) )
		int accountLevel = GetAccountLevelForXP( xpProgress )
		return minint( accountLevel, GetHighestAccountDisplaylevel() )
	})

	return info
}




StatCalcFuncInfo function SetupModesWeaponCategoryStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplate = sourceTemplates[0]

	StatCalcFuncInfo info

	string calcMode 		  = calcEntry.enumKeys[0]
	string calcWeaponCategory = calcEntry.enumKeys[1]

	info.sourceEntries = []
	array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )
	foreach ( string weaponItemRefInCategory, bool unused in fileLevel.weaponStatCategoryWeaponItemRefSet[calcWeaponCategory] )
	{
		sourceEntries.append( ResolveStatEntry( sourceTemplate, calcMode, weaponItemRefInCategory ) )
	}

	info.calcFunc_Int = CalcStatSum_Int

	return info
}



StatCalcFuncInfo function SetupCharacterWeaponCategoryStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplate = sourceTemplates[0]

	StatCalcFuncInfo info

	string calcCharacter      = calcEntry.enumKeys[0]
	string calcWeaponCategory = calcEntry.enumKeys[1]

	info.sourceEntries = []
	array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )
	foreach ( string weaponItemRefInCategory, bool unused in fileLevel.weaponStatCategoryWeaponItemRefSet[calcWeaponCategory] )
	{
		sourceEntries.append( ResolveStatEntry( sourceTemplate, calcCharacter, weaponItemRefInCategory ) )
	}

	info.calcFunc_Int = CalcStatSum_Int

	return info
}




StatCalcFuncInfo function SetupWeaponCategoryStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplate = sourceTemplates[0]

	StatCalcFuncInfo info

	string calcWeaponCategory = calcEntry.enumKeys[0]

	info.sourceEntries = []
	array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )

	foreach ( characterRef in GetAllCharacterGUIDStringsForStats() )
	{
		sourceEntries.append( ResolveStatEntry( sourceTemplate, characterRef, calcWeaponCategory ) )
	}

	info.calcFunc_Int = CalcStatSum_Int

	return info
}




StatCalcFuncInfo function SetupAnyModeWeaponCategoryStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplateBR    = sourceTemplates[0]
	StatTemplate sourceTemplateModes = sourceTemplates[1]

	StatCalcFuncInfo info

	string calcWeaponCategory = calcEntry.enumKeys[0]

	info.sourceEntries = []
	array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )

	foreach ( characterRef in GetAllCharacterGUIDStringsForStats() )
	{
		sourceEntries.append( ResolveStatEntry( sourceTemplateBR, characterRef, calcWeaponCategory ) )
	}
	foreach ( string weaponItemRefInCategory, bool unused in fileLevel.weaponStatCategoryWeaponItemRefSet[calcWeaponCategory] )
	{
		foreach ( string modeRefInCategory in STATS_ALTERNATE_MODE_REFS )
		{
			sourceEntries.append( ResolveStatEntry( sourceTemplateModes, modeRefInCategory, weaponItemRefInCategory ) )
		}
	}

	info.calcFunc_Int = CalcStatSum_Int

	return info
}































 StatCalcFuncInfo function SetupModesExceptBRWeaponCategoryStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
 {
	 StatTemplate sourceTemplateModes = sourceTemplates[0]

	 StatCalcFuncInfo info

	 string calcWeaponCategory = calcEntry.enumKeys[0]

	 info.sourceEntries = []
	 array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )
	 foreach ( string weaponItemRefInCategory, bool unused in fileLevel.weaponStatCategoryWeaponItemRefSet[calcWeaponCategory] )
	 {
		 foreach ( string modeRefInCategory in STATS_ALTERNATE_MODE_REFS )
		 {
			 sourceEntries.append( ResolveStatEntry( sourceTemplateModes, modeRefInCategory, weaponItemRefInCategory ) )
		 }
	 }

	 info.calcFunc_Int = CalcStatSum_Int

	 return info
 }




 StatCalcFuncInfo function SetupModesExceptBRCharacterStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
 {
	 StatTemplate sourceTemplateModes = sourceTemplates[0]

	 StatCalcFuncInfo info
	 string calcCharacter = calcEntry.enumKeys[0]

	 info.sourceEntries = []
	 array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )

	 foreach ( string modeRefInCategory in STATS_ALTERNATE_MODE_REFS )
		 sourceEntries.append( ResolveStatEntry( sourceTemplateModes, modeRefInCategory, calcCharacter ) )

	 info.calcFunc_Int = CalcStatSum_Int

	 return info
 }




 StatCalcFuncInfo function SetupModesExceptBRStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
 {
	 StatTemplate sourceTemplateModes = sourceTemplates[0]

	 StatCalcFuncInfo info

	 info.sourceEntries = []
	 array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )

	 foreach ( string modeRefInCategory in STATS_ALTERNATE_MODE_REFS )
		 sourceEntries.append( ResolveStatEntry( sourceTemplateModes, modeRefInCategory ) )

	 info.calcFunc_Int = CalcStatSum_Int

	 return info
 }




StatCalcFuncInfo function SetupCharacterStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplate = sourceTemplates[0]

	StatCalcFuncInfo info

	info.sourceEntries = []
	array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )
	foreach ( characterRef in GetAllCharacterGUIDStringsForStats() )
		sourceEntries.append( ResolveStatEntry( sourceTemplate, characterRef ) )

	info.calcFunc_Int = CalcStatSum_Int

	return info
}



StatCalcFuncInfo function SetupRankedArenasCareerFlattenerFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplate = sourceTemplates[0]

	StatCalcFuncInfo info

	info.sourceEntries = []
	array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )
	foreach ( string arenasRankedPeriod in ARENAS_RANKED_PERIODS_REFS )
		sourceEntries.append( ResolveStatEntry( sourceTemplate, arenasRankedPeriod ) )

	info.calcFunc_Int = CalcStatSum_Int

	return info
}



StatCalcFuncInfo function SetupRankedArenasCareerFindMaxFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplate = sourceTemplates[0]

	StatCalcFuncInfo info

	info.sourceEntries = []
	array<StatEntry> sourceEntries = expect array<StatEntry>( info.sourceEntries )
 	foreach ( string arenasRankedPeriod in ARENAS_RANKED_PERIODS_REFS )
		sourceEntries.append( ResolveStatEntry( sourceTemplate, arenasRankedPeriod ) )

 	info.calcFunc_Int = FindMaxStat_Int

 	return info
}




int function FindMaxStat_Int( entity player, array<StatEntry> sourceEntries, int when )
{
	int max = 0
	foreach ( StatEntry sourceEntry in sourceEntries )
	{
		int temp = GetStat_Int( player, sourceEntry, when )
		if ( temp > max )
			max = temp
	}
	return max
}



int function CalcStatSum_Int( entity player, array<StatEntry> sourceEntries, int when )
{
	int sum = 0
	foreach ( StatEntry sourceEntry in sourceEntries )
		sum += GetStat_Int( player, sourceEntry, when )
	return sum
}



StatCalcFuncInfo function SetupGetTotalLegendaryItemsForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		

		int count = 0
		if ( GetCurrentPlaylistVarBool( "has_grx_badge_stats_opts", true ) )
		{
			EHIScriptStruct ehiss = GetEHIScriptStruct( ToEHI( player ) )
			ehiss.legendaryItemsOwnedByPlayer.clear()
			foreach ( ItemFlavor flav in GetAllLegendaryItems() )
			{
				if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( flav, player ) )
				{
					count++
					ehiss.legendaryItemsOwnedByPlayer.append( flav )
				}
			}
		}
		else
		{
			foreach ( ItemFlavor flav in GetAllItemFlavorsCosmetic() )
			{
				if ( ItemFlavor_GetGRXMode( flav ) != eItemFlavorGRXMode.REGULAR )
					continue

				if ( !ItemFlavor_HasQuality( flav ) || ItemFlavor_GetQuality( flav ) < eRarityTier.LEGENDARY )
					continue

				if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( flav, player ) )
					count++
			}
		}

		return count
	})

	return info
}



StatCalcFuncInfo function SetupGetNumCharactersWithBannersOnceFilledForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		foreach ( characterRef in GetAllCharacterGUIDStringsForStats() )
		{
			if ( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.character_banner_once_filled, characterRef ), when ) == 1 )
				count++
		}
		return count
	})

	return info
}




 string function GetBotQueueGraduationStatRef( entity player )
 {
	 foreach ( string statRef, int value in GetBotQueueGradStatValues() )
	 {
		 Assert( IsValidStatEntryRef(statRef) )
		 if ( GetStat_Int( player, GetStatEntryByRef( statRef ), eStatGetWhen.CURRENT ) >= value )
			 return statRef
	 }
	 return ""
 }
 table< string, int > function GetBotQueueGradStatValues()
 {
	 
	 string botQueueGradOverrides = GetPlaylistVarString( PLAYLIST_NEW_PLAYER_ORIENTATION, "botQueueGraduationOverrides", "" )
	 foreach ( string pair in split( botQueueGradOverrides, WHITESPACE_CHARACTERS ) )
	 {
		 array<string> splitPair = split( pair, ":" )
		 Assert ( splitPair.len() == 2 && splitPair[1].isnumeric(), "Playlist Var \"botQueueGraduationOverrides\" has invalid pair ("+pair+") should be in the format: <StatRef>:<Value>" )
		fileLevel.botQueueGraduationRequirements[ splitPair[0] ] <- int( splitPair[1] )
	 }

	 return fileLevel.botQueueGraduationRequirements
 }

 StatCalcFuncInfo function SetupGraduatedBotQueueStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
 {
	 StatCalcFuncInfo info

	 info.calcFunc_Int = ( int function ( entity player, array<StatEntry> sourceEntries, int when ) : ( calcEntry ) {
		 foreach ( string statRef, int value in GetBotQueueGradStatValues() )
		 {
			 Assert( IsValidStatEntryRef(statRef) )
			 StatEntry statEntry = GetStatEntryByRef( statRef )
			 Assert( statEntry != calcEntry, "Trying to use this stat as a requirement for it's own value ("+statRef+")" )
			 if ( GetStat_Int( player, statEntry, when ) >= value )
				 return 1
		 }
		return 0
	 } )

	 return info
 }









































































StatCalcFuncInfo function SetupGetStarterPackStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when )
	{
		return PlayerHasStarterPack( player ) ? 1 : 0
	})

	return info
}



StatCalcFuncInfo function SetupGetFounderPackStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when )
	{
		return PlayerHasFoundersPack( player ) ? 1 : 0
	})

	return info
}



StatCalcFuncInfo function SetupGetTwitchPackStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {

			return player.DoesUserHaveTwitchPrimeReward( "twitch_launch_promo" ) ? 1 : 0




	})

	return info
}




StatCalcFuncInfo function SetupGetEAAccessStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		return PlayerHadEAAccess( player ) ? 1 : 0
	})

	return info
}



StatCalcFuncInfo function SetupGetCountOfCharactersWithLegendarySkinAndExecutionForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		

		int count = 0
		if ( GetCurrentPlaylistVarBool( "has_grx_badge_stats_opts", true ) )
		{
			EHIScriptStruct ehiss = GetEHIScriptStruct( ToEHI( player ) )
			foreach ( characterRef in GetAllCharacterGUIDStringsForStats() )
			{
				ItemFlavor character = GetItemFlavorByGUID( ConvertItemFlavorGUIDStringToGUID( characterRef ) )
				bool hasLegendarySkin     = false
				bool hasLegendaryFinisher = false

				array<ItemFlavor> characterSkins = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_CharacterSkin( character ) )
				foreach ( ItemFlavor flav in ehiss.legendaryItemsOwnedByPlayer )
				{
					if ( characterSkins.contains( flav ) )
					{
						hasLegendarySkin = true
						break
					}
				}

				array<ItemFlavor> executions = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_CharacterExecution( character ) )
				foreach ( ItemFlavor flav in ehiss.legendaryItemsOwnedByPlayer )
				{
					if ( executions.contains( flav ) )
					{
						hasLegendaryFinisher = true
						break
					}
				}

				if ( hasLegendarySkin && hasLegendaryFinisher )
					count++
			}
		}
		else
		{
			foreach ( characterRef in GetAllCharacterGUIDStringsForStats() )
			{
				ItemFlavor character = GetItemFlavorByGUID( ConvertItemFlavorGUIDStringToGUID( characterRef ) )
				bool hasLegendarySkin     = false
				bool hasLegendaryFinisher = false

				array<ItemFlavor> characterSkins = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_CharacterSkin( character ) )
				foreach ( skin in characterSkins )
				{
					if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( skin, player ) && ItemFlavor_HasQuality( skin ) && ItemFlavor_GetQuality( skin ) == eRarityTier.LEGENDARY )
					{
						hasLegendarySkin = true
						break
					}
				}

				array<ItemFlavor> executions = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_CharacterExecution( character ) )
				foreach ( execution in executions )
				{
					if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( execution, player ) && ItemFlavor_HasQuality( execution ) && ItemFlavor_GetQuality( execution ) == eRarityTier.LEGENDARY )
					{
						hasLegendaryFinisher = true
						break
					}
				}

				if ( hasLegendarySkin && hasLegendaryFinisher )
					count++
			}
		}

		return count
	})

	return info
}



StatCalcFuncInfo function SetupGetCountOfWeaponsWithLegendarySkinsForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		

		int count = 0
		if ( GetCurrentPlaylistVarBool( "has_grx_badge_stats_opts", true ) )
		{
			EHIScriptStruct ehiss = GetEHIScriptStruct( ToEHI( player ) )
			foreach ( ItemFlavor weapon in GetAllWeaponItemFlavors() )
			{
				array<ItemFlavor> weaponSkins = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_WeaponSkin( weapon ) )
				foreach ( ItemFlavor flav in ehiss.legendaryItemsOwnedByPlayer )
				{
					if ( weaponSkins.contains( flav ) )
					{
						count++
						break
					}
				}
			}
		}
		else
		{
			foreach ( ItemFlavor weapon in GetAllWeaponItemFlavors() )
			{
				array<ItemFlavor> weaponSkins = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_WeaponSkin( weapon ) )
				foreach ( skin in weaponSkins )
				{
					if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( skin, player ) && ItemFlavor_HasQuality( skin ) && ItemFlavor_GetQuality( skin ) >= eRarityTier.LEGENDARY )
					{
						count++
						break
					}
				}
			}
		}

		return count
	})

	return info
}



StatCalcFuncInfo function SetupGetCountOfCharactersWithWellRoundedDamageForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0
		foreach ( characterRef in GetAllCharacterGUIDStringsForStats() )
		{
			int damageDone      = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.character_damage_done, characterRef ), when )
			if ( damageDone > 20000 )
				count++
		}
		return count
	})

	return info
}





StatCalcFuncInfo function SetupGetTreasureHunterStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		
		return 0
	})

	return info
}



StatCalcFuncInfo function SetupGetElite888StatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		foreach ( characterRef in GetAllCharacterGUIDStringsForStats() )
		{
			if ( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.character_elite_game_8kill_wins, characterRef ), when ) >= 1 )
				count++
		}

		return count
	})

	return info
}



StatCalcFuncInfo function SetupGetNumSoloWinsWithAllCharactersIronCrown( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		foreach ( characterRef in GetAllCharacterGUIDStringsForStats() )
		{
			if ( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.season02_event01_character_solo_wins, characterRef ), when ) >= 1 )
				count++
		}

		return count
	})

	return info
}



StatCalcFuncInfo function SetupGetDuosTiersEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int tiersEarned = 0

		int gamesPlayed = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s03_duos_badge_play ), when )
		int gamesWon    = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s03_duos_badge_win ), when )

		if ( gamesPlayed > 0 )
			tiersEarned = 1

		if ( gamesWon >= 2 )
			tiersEarned = gamesWon

		return tiersEarned
	})

	return info
}



StatCalcFuncInfo function SetFirstPlayedUnixTime( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int launchUnixTime           = 1549310400
		int daysInstalledAfterLaunch = (player.GetPersistentVarAsInt( "installUnixTime" ) - launchUnixTime) / SECONDS_PER_DAY

		
		if ( daysInstalledAfterLaunch <= 7 )
			return 2

		
		if ( daysInstalledAfterLaunch <= 31 )
			return 1

		
		return 0
	})

	return info
}



StatCalcFuncInfo function SetupGetCountOfCharactersWithTenWinsForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0
		foreach ( characterRef in GetAllCharacterGUIDStringsForStats() )
		{
			if ( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.character_placements_win, characterRef ), when ) >= 10 )
				count++
		}

		return count
	})

	return info
}



StatCalcFuncInfo function SetupGetSeasonBattlePassLevelForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	string seasonRef = calcEntry.enumKeys[0]

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) : ( seasonRef ) {
		ItemFlavor season = GetItemFlavorByGUID( ConvertItemFlavorGUIDStringToGUID( seasonRef ) )
		ItemFlavor pass   = Season_GetBattlePass( season )

		
		
		

		return GetPlayerBattlePassLevel( player, pass, false ) + 1
	})

	return info
}



StatCalcFuncInfo function SetupGetArmedAndDangerousEvolvedCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int kills           = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s05e01_armed_and_dangerous_evolved_kills ), when )
		int wins            = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s05e01_armed_and_dangerous_evolved_wins ), when )
		int alliesRespawned = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s05e01_armed_and_dangerous_evolved_times_respawned_ally ), when )

		if ( kills >= 100 && wins >= 5 && alliesRespawned >= 15 )
			count = 1

		return count
	})

	return info
}



StatCalcFuncInfo function SetupGetCampfireCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int kills           = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e01_campfire_players_killed_in_zone ), when )
		int wins            = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e01_campfire_wins ), when )
		int damageDealt 	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e01_campfire_damage_dealt_in_zone ), when )

		if ( kills >= 100 && wins >= 10 && damageDealt >= 10000 )
			count = 1

		return count
	})

	return info
}



StatCalcFuncInfo function SetupGetShadowRoyaleCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int kills   = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e02_shadow_royale_kills ), when )
		int wins    = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e02_shadow_royale_wins ), when )
		int revives	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s06e02_shadow_royale_revives ), when )

		if ( kills >= 100 && wins >= 5 && revives >= 15 )
			count = 1

		return count
	})

	return info
}



StatCalcFuncInfo function SetupGetWinterExpressCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int captures           	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e01_winter_express_captures ), when )
		int damage           	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e01_winter_express_damage ), when )
		int kills 				= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e01_winter_express_kills ), when )

		if ( kills >= 100 && captures >= 100 && damage >= 10000 )
			count = 1

		return count
	})

	return info
}



StatCalcFuncInfo function SetupGetAirdropKittedCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int damage           	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e02_airdropkitted_damage_dealt ), when )
		int knockdowns          = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e02_airdropkitted_knockdowns ), when )
		int wins 				= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s07e02_airdropkitted_wins ), when )

		if ( damage >= 10000 && knockdowns >= 100 && wins >= 5 )
			count = 1

		return count
	})

	return info
}




StatCalcFuncInfo function SetupGetS08SeasonalCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int nessie           	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08seasonal_nessie_dailies ), when )
		int weapon          	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08seasonal_weapon_damage ), when )
		int character 			= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08seasonal_character_wins ), when )

		if ( nessie >= 75 )
			count++
		if ( weapon >= 102816 )
			count++
		if ( character >= 8 )
			count++

		return count
	})

	return info
}



StatCalcFuncInfo function SetupGetRingFuryCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int heatshield          = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e01_ringfury_challenge_2 ), when )
		int damage          	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e01_ringfury_challenge_3 ), when )
		int knockdowns			= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e01_ringfury_challenge_4 ), when )

		if ( heatshield >= 1000 && damage >= 10000 && knockdowns >= 100 )
			count = 1

		return count
	})

	return info
}



StatCalcFuncInfo function SetupGetWarGamesCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int damage          	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e02_wargames_challenge_2 ), when )
		int wins          		= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e02_wargames_challenge_3 ), when )
		int knockdowns			= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e02_wargames_challenge_4 ), when )

		if ( damage >= 15000 && wins >= 5 && knockdowns >= 250 )
			count = 1

		return count
	})

	return info
}



StatCalcFuncInfo function SetupGetGenesisCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int br_damage       = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s09e01_br_damage_done ), when )
		int arenas_wins     = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s09e01_arenas_placements_win ), when )
		int br_knockdowns	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s09e01_br_dooms ), when )

		if ( br_damage >= 10000 && arenas_wins >= 50 && br_knockdowns >= 100 )
			count = 1

		return count
	})

	return info
}



StatCalcFuncInfo function SetupGetRaidersCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int we_damage       = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s11e01_winter_express_damage_done ), when )
		int arenas_damage   = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s11e01_arenas_damage_done ), when )
		int br_knockdowns	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s11e01_br_dooms ), when )

		if ( we_damage >= 10000 && arenas_damage >= 25000 && br_knockdowns >= 100 )
			count = 1

		return count
	})

	return info
}



StatCalcFuncInfo function SetupGetS12ACECombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	




	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		int control_captures = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s12ace_control_captures ), when )
		int br_damage        = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s12ace_br_damage_done ), when )
		int br_knockdowns	 = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s12ace_br_dooms ), when )

		if ( control_captures >= 100 && br_damage >= 10000 && br_knockdowns >= 100 )
			count = 1

		return count
	})

	return info
}



 StatCalcFuncInfo function SetupGetWarriorsCombinedBadgeEarned( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
 {
	 StatCalcFuncInfo info

	 




	 info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		 int count = 0

		 int control_captures = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s12e01_control_captures ), when )
		 int br_damage        = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s12e01_br_damage_done ), when )
		 int br_knockdowns	 = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s12e01_br_dooms ), when )

		 if ( control_captures >= 100 && br_damage >= 10000 && br_knockdowns >= 100 )
			 count = 1

		 return count
	 })

	 return info
 }



StatCalcFuncInfo function SetupGetS08E04FinaleNotCompletedForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int s08e04FinaleCompleted           	= GetStat_Int( player, ResolveStatEntry( CAREER_STATS.s08e04_finale_completed ), when )
		int count = 0

		if ( s08e04FinaleCompleted == 0 )
		{
			count = 1
		}

		return count
	})

	return info
}























int function ArenasRanked_GetHistoricalPeakHighScore( entity player )
{
	
	int max = 0
	foreach ( string arenasRankedPeriod in ARENAS_RANKED_PERIODS_REFS )
	{



			int score =  player.GetPersistentVarAsInt( "arenasRankedData[" + arenasRankedPeriod + "].highestArenasRankedScore" )

		if ( score > max )
			max = score
	}

	return max
}

int function ArenasRanked_GetHistoricalPeakLadderPosition( entity player )
{
	
	
	int max = SHARED_RANKED_INVALID_LADDER_POSITION
	foreach ( string arenasRankedPeriod in ARENAS_RANKED_PERIODS_REFS )
	{




			int pos1 =  player.GetPersistentVarAsInt( "arenasRankedData[" + arenasRankedPeriod + "].endFirstSplitLadderPosition" )
			int pos2 =  player.GetPersistentVarAsInt( "arenasRankedData[" + arenasRankedPeriod + "].endSeriesLadderPosition" )

		if ( pos1 > max || pos2 > max )
			max = maxint( pos1, pos2 )
	}

	return max
}

















      
