












const asset BACKGROUND_SMOKE_MODEL = $"mdl/levels_terrain/mp_lobby/mp_character_select_smoke.rmdl" 
const asset BACKGROUND_GEO_MODEL = $"mdl/levels_terrain/mp_lobby/mp_character_select_geo.rmdl" 
const asset LIGHT_RIG_MDL = $"mdl/empty/lights/empty_lights.rmdl"

global const string CHARACTER_SELECT_NETVAR_LOCK_STEP_INDEX = "characterSelectLockstepIndex"
global const string CHARACTER_SELECT_NETVAR_LOCK_STEP_START_TIME = "characterSelectLockstepStartTime"
global const string CHARACTER_SELECT_NETVAR_LOCK_STEP_END_TIME = "characterSelectLockstepEndTime"
global const string CHARACTER_SELECT_NETVAR_HAS_LOCKED_IN_CHARACTER = "hasLockedInCharacter"
global const string CHARACTER_SELECT_NETVAR_LOCKED_IN_CHARACTER_TIME = "lockedInCharacterTime"

global const string CHARACTER_SELECT_NETVAR_LOCK_STEP_PLAYER_INDEX = "characterSelectLockstepPlayerIndex"
global const string CHARACTER_SELECT_NETVAR_FOCUS_CHARACTER_GUID = "characterSelectFocusCharacterGUID"

const string REMOTE_SERVERCALL_ON_RESELECT_MENU_OPEN = "ClientToServer_OnCharacterReselectMenuOpen"
const string REMOTE_SERVERCALL_ON_RESELECT_MENU_CLOSE = "ClientToServer_OnCharacterReselectMenuClose"









global function UI_InitCharacterSelectNewMenu
global function UI_RunCharacterSelect
global function UI_CloseCharacterSelect
global function ClientToUI_UpdateSquadMute
global function UI_ClearUIShelves


global function CharacterSelectSkinSelectionIsEnabled






global const int NUM_CHARACTER_SELECT_BUTTONS = 50





































































































const string FUNCNAME_CLUB_SETCLUBSQUADBOOL_SV = "ClientToServer_SetClubSquadBool"
const string FUNCNAME_CLUB_SETCLUBSQUADBOOL_CL = "ServerToClient_SetClubPartyBool"
global const string CLUB_NAME_EMPTY = "?Club!Name?"














struct FileForeverStruct
{
	var menu
}
FileForeverStruct& fileForever


struct FileLevelStruct
{

		bool isBrowseMode = false
		bool browseModeShowLockedCharacters = false
		float isBrowseModeStartTime
























































































































}

struct CharacterLists {
	array<ItemFlavor> shipping
	array<ItemFlavor> unlocked
	array<ItemFlavor> locked
	array<ItemFlavor> disabled
	array<ItemFlavor> all
}

global function Character_IsCharacterUnlockedForCalevent

FileLevelStruct& fileLevel

struct {
	array< void functionref() > Callbacks_OnCharacterMenuOpened
	array< void functionref() > Callbacks_OnCharacterMenuClosed
	array< void functionref(ItemFlavor) > Callbacks_OnCharacterFocused
	array< void functionref(ItemFlavor) > Callbacks_OnCharacterLocked
	array< void functionref(bool) > Callbacks_OnCharacterDetailsToggled













} file










void function UI_InitCharacterSelectNewMenu( var newMenuArg )

{
	fileForever.menu = GetMenu( "CharacterSelectMenuNew" )

	AddMenuEventHandler( fileForever.menu, eUIEvent.MENU_NAVIGATE_BACK, UI_OnCharacterSelectMenu_NavBack )

	AddMenuFooterOption( fileForever.menu, RIGHT, BUTTON_X, true, "", "", UI_OnLoadoutButton_RightClick ) 
	AddMenuFooterOption( fileForever.menu, RIGHT, MOUSE_RIGHT, true, "", "", UI_OnLoadoutButton_RightClick ) 

	AddMenuFooterOption( fileForever.menu, RIGHT, BUTTON_Y, true, "", "", UI_OnToggleMuteButtonClick, UI_ShouldShowToggleMuteFooter ) 
	AddMenuFooterOption( fileForever.menu, RIGHT, KEY_F, true, "", "", UI_OnToggleMuteButtonClick, UI_ShouldShowToggleMuteFooter ) 

	AddMenuEventHandler( fileForever.menu, eUIEvent.MENU_CLOSE, void function() {
		RunClientScript( "OnCharacterSelectNewMenuClosed_RemoveCallbacks" )
	} )

	ToolTips_AddMenu( newMenuArg )


		AddMenuFooterOption( fileForever.menu, RIGHT, KEY_ENTER, true, "", "", UI_OnLoadoutButton_Enter )

}

bool function UI_ShouldShowToggleMuteFooter()
{
	return IsFullyConnected() ? SquadMuteLegendSelectEnabled() : false
}

void function UI_OnLoadoutButton_Enter( var button )
{
	var chatbox = Hud_GetChild( fileForever.menu, "LobbyChatBox" )

	if ( !HudChat_HasAnyMessageModeStoppedRecently() )
		Hud_StartMessageMode( chatbox )

	Hud_SetVisible( chatbox, true )
}

void function UI_OnLoadoutButton_RightClick( var button )
{
	if ( CanRunClientScript() )
		RunClientScript( "OnLoadoutButton_RightClick" )
}


void function UI_OnToggleMuteButtonClick( var button )
{
	if ( CanRunClientScript() )
		RunClientScript( "UIToClient_ToggleMute" )
}

void function ClientToUI_UpdateSquadMute( bool muteState )
{

}






















































bool function CharacterSelectSkinSelectionIsEnabled()
{
	return GetCurrentPlaylistVarBool( "character_select_do_skin_selection", false )
}







































































































































































































































































































































































































































































































































































































































































































































































































































void function UI_RunCharacterSelect( bool isBrowseMode, bool menuEntsExist )
{
	if ( !isBrowseMode )
		CloseAllMenus()

	fileLevel.isBrowseMode = isBrowseMode
	fileLevel.isBrowseModeStartTime = UITime()

	if ( !CanRunClientScript() )
		return

	if ( !menuEntsExist )
		SetBlurEnabled( true )

	var portraitsPanel = Hud_GetChild( fileForever.menu, "PortraitsPanel" )
	RunClientScript( "_OpenCharacterSelectNewMenu", fileForever.menu )

	FlashGameWindow()
	AdvanceMenu( fileForever.menu )
}















































































































































































































































































































































































































































































































































































































void function UI_ClearUIShelves()
{
	var portraitsPanel = Hud_GetChild( GetMenu( "CharacterSelectMenuNew" ), "PortraitsPanel" )

	Hud_SetVisible( Hud_GetChild( portraitsPanel, "assaultShelf" ) , false )
	Hud_SetVisible( Hud_GetChild( portraitsPanel, "SkirmisherShelf" ) , false )
	Hud_SetVisible( Hud_GetChild( portraitsPanel, "reconShelf" ) , false )
	Hud_SetVisible( Hud_GetChild( portraitsPanel, "supportShelf" ) , false )
	Hud_SetVisible( Hud_GetChild( portraitsPanel, "controllerShelf" ) , false )

}

void function UI_OnCharacterSelectMenu_NavBack()
{
	
	if ( fileLevel.isBrowseMode )
	{
		RunClientScript( "CloseCharacterSelectNewMenu" )
		return
	}

	RunClientScript( "Client_TryUnlockCharacter" )
}

void function UI_CloseCharacterSelect()
{
	SetBlurEnabled( false )
	if ( GetActiveMenu() == fileForever.menu )
		CloseActiveMenu()
	else if ( MenuStack_Contains( fileForever.menu ) )
		MenuStack_Remove( fileForever.menu )
}











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































bool function IsCharacterReselectEnabled()
{
	return GetCurrentPlaylistVarBool( "character_reselect_enabled", false )
}













bool function SquadMuteLegendSelectEnabled()
{
	return GetCurrentPlaylistVarBool( "squad_mute_legend_select_enable", true )
}









































































































bool function Character_IsCharacterUnlockedForCalevent( ItemFlavor characterItemFlavor )
{
	
	
	table < asset, string > activeCharacterUnlocks = {}


	activeCharacterUnlocks[$"settings/itemflav/calevent/s18rr/s18_rr_challenges.rpak"] <- "SAID00064207844" 


	
	foreach ( eventAsset, unlockedCharacterGUID in activeCharacterUnlocks )
	{
		bool isEventActive = CalEvent_IsActive( GetItemFlavorByAsset( eventAsset ), GetUnixTimestamp() )
		bool isCharacterMatch = ItemFlavor_GetGUIDString( characterItemFlavor ) == unlockedCharacterGUID

		if ( isEventActive && isCharacterMatch )
			return true
	}

	return false
}

