global function ShLoadscreen_Init
global function ShLoadscreen_LevelInit

global function Loadout_Loadscreen
global function Loadscreen_GetSortOrdinal
global function Loadscreen_GetLoadscreenImageAsset
global function Loadscreen_GetRPakName
global function Loadscreen_GetImageOverlayText






struct FileStruct_LifetimeLevel
{
	LoadoutEntry&          loadoutSelectionSlot
	table<ItemFlavor, int> loadscreenFlavorSortOrdinalMap

}
FileStruct_LifetimeLevel& fileLevel








void function ShLoadscreen_Init()
{
	RegisterSignal( "Loadscreen_SetCustomLoadscreen" )




}

void function ShLoadscreen_LevelInit()
{
	FileStruct_LifetimeLevel newFileGame
	fileLevel = newFileGame

	AddCallback_RegisterRootItemFlavors( OnRegisterRootItemFlavors )
}



void function OnRegisterRootItemFlavors()
{
	LoadoutEntry entry = RegisterLoadoutSlot( eLoadoutEntryType.ITEM_FLAVOR, "loadscreen_selection", eLoadoutEntryClass.ACCOUNT )
	entry.networkTo = eLoadoutNetworking.PLAYER_EXCLUSIVE
#if DEV
		entry.DEV_name       = "Loadscreen"
#endif
	fileLevel.loadoutSelectionSlot = entry

	array<ItemFlavor> loadscreenList = []
	foreach ( asset loadscreenAsset in GetBaseItemFlavorsFromArray( "loadscreens" ) )
	{
		if ( loadscreenAsset == $"" )
			continue

		ItemFlavor ornull loadscreenOrNull = RegisterItemFlavorFromSettingsAsset( loadscreenAsset )
		if ( loadscreenOrNull == null )
			continue
		loadscreenList.append( expect ItemFlavor( loadscreenOrNull ) )
	}

	MakeItemFlavorSet( loadscreenList, fileLevel.loadscreenFlavorSortOrdinalMap, true )

	entry.validItemFlavorList = loadscreenList
	entry.defaultItemFlavor = loadscreenList[1]
	entry.favoriteItemFlavor = loadscreenList[0]
	entry.maxFavoriteCount = 8
}







LoadoutEntry function Loadout_Loadscreen()
{
	return fileLevel.loadoutSelectionSlot
}

int function Loadscreen_GetSortOrdinal( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.loadscreen )

	return fileLevel.loadscreenFlavorSortOrdinalMap[flavor]
}

asset function Loadscreen_GetLoadscreenImageAsset( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.loadscreen )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "loadscreenImage" )
}

string function Loadscreen_GetRPakName( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.loadscreen )

	asset imageAsset         = Loadscreen_GetLoadscreenImageAsset( flavor )
	array<string> assetStrParts = split( string(imageAsset), "/" )
	Assert( assetStrParts.len() == 3 ) 
	Assert( assetStrParts[0] == "loadscreens" )
	Assert( assetStrParts[1] == "custom" )
	Assert( assetStrParts[2].find( "loadscreen_" ) == 0 )
	return assetStrParts[2] 
}

string function Loadscreen_GetImageOverlayText( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.loadscreen )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "overlayText" )
}


































































