




global function GamemodeUtility_Init
global function GamemodeUtility_RegisterNetworking
global function GamemodeUtility_IsJIPEnabledInPlaylist	
global function GamemodeUtility_GetMixtapeAbandonPenaltyActive
global function GamemodeUtility_ParseCircleString 























































const float UNSET_PLAYLIST_VAR_FLOAT = -1
const int UNSET_PLAYLIST_VAR_INT = -1
global const int EXPECTED_PARSED_CIRCLE_VALUE_COUNT = 4





































struct {














} file

void function GamemodeUtility_Init()
{













































}

void function GamemodeUtility_RegisterNetworking()
{
	Remote_RegisterClientFunction( "GamemodeUtility_ServerCallback_DisplayMatchTimeLimitWarning", "bool" )
	RegisterNetworkedVariable( "mixtape_isLeaverPenaltyEnabledForMatch", SNDC_GLOBAL, SNVT_BOOL, true )












	
	if ( GamemodeUtility_IsJIPEnabledInPlaylist() )
	{



		Remote_RegisterClientFunction( "GamemodeUtility_ServerCallback_PlayerJoinedMatchInProgress" )
	}
}























bool function GamemodeUtility_IsJIPEnabledInPlaylist()
{
	return GetCurrentPlaylistVarBool( "match_jip", false )
}






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































bool function GamemodeUtility_GetMixtapeAbandonPenaltyActive()
{
	return GetCurrentPlaylistVarBool( "mixtape_match_abandon_penalty", false )
}































































































































































































int function GamemodeUtility_GetMaxDroppedGrenadesOnDeath()
{
	return GetCurrentPlaylistVarInt( "grenade_ondeath_max_spawncount", 1 )
}
































float function GetPlaylistVar_DeathboxDuration()
{
	return GetCurrentPlaylistVarFloat( "deathbox_duration", 60.0 )
}










































































array< float > function GamemodeUtility_ParseCircleString( string cullingCircleString )
{
	
	
	
	array< float > circleValuesArray
	
	array< string > circleStringValuesArray = GetTrimmedSplitString( cullingCircleString, "," )

	
	cullingCircleString = GamemodeUtility_GetParsedStringForCircleValues( circleStringValuesArray )
	circleStringValuesArray = GetTrimmedSplitString( cullingCircleString, "<" )

	
	cullingCircleString = GamemodeUtility_GetParsedStringForCircleValues( circleStringValuesArray )
	circleStringValuesArray = GetTrimmedSplitString( cullingCircleString, ">" )

	
	cullingCircleString = GamemodeUtility_GetParsedStringForCircleValues( circleStringValuesArray )
	circleStringValuesArray = GetTrimmedSplitString( cullingCircleString, " " )

	
	foreach( item in circleStringValuesArray )
	{
		circleValuesArray.append( float( item ) )
	}

	return circleValuesArray
}


string function GamemodeUtility_GetParsedStringForCircleValues( array< string > stringValuesArray )
{
	string parsedPlaylistString = ""
	foreach( item in stringValuesArray )
	{
		parsedPlaylistString += " " + item
	}

	return parsedPlaylistString
}










