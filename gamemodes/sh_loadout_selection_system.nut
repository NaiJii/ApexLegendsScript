


























global function LoadoutSelection_Init









































global function LoadoutSelection_UpdateLoadoutInfo_UI
global function LoadoutSelection_SetSelectedLoadoutSlotIndex_UI
global function LoadoutSelection_GetSelectedLoadoutSlotIndex_UI
global function LoadoutSelection_SetLoadoutCounts_UI
global function LoadoutSelection_GetLoadoutCounts_UI


global function IsUsingLoadoutSelectionSystem
global function LoadoutSelection_GetWeaponCountByLoadoutIndex





global const int LOADOUTSELECTION_MAX_LOADOUT_COUNT_REGULAR = 6





global const int LOADOUTSELECTION_MAX_TOTAL_LOADOUT_SLOTS = LOADOUTSELECTION_MAX_LOADOUT_COUNT_REGULAR


global const int LOADOUTSELECTION_MAX_WEAPONS_PER_LOADOUT = 2
global const int LOADOUTSELECTION_MAX_CONSUMABLES_PER_LOADOUT = 5
global const int LOADOUTSELECTION_MAX_SCOPE_INDEX = 9


global function LoadoutSelection_GetLocalizedLoadoutHeader
global function LoadoutSelection_GetLoadoutSlotTypeForLoadoutIndex
global function LoadoutSelection_GetSelectedLoadoutSlotIndex_CL_UI
















const asset LOADOUTSELECTION_WEAPON_DATA_DATATABLE = $"datatable/loadoutselection_weapon_data.rpak"




















































global enum eLoadoutSelectionSlotType
{
	INVALID,
	REGULAR,





	_count
}














































struct {






















	asset weaponDataDatatable = LOADOUTSELECTION_WEAPON_DATA_DATATABLE
	
	table < int, int > loadoutSlotIndexToWeaponCountTable
	table < int, string > loadoutSlotIndexToHeaderTable
	table < int, int > loadoutSlotIndexToLoadoutTypeTable


		int playerSelectedLoadout = 0
		
		int maxLoadoutCountRegular = -1










} file

void function LoadoutSelection_Init()
{
	if ( !IsUsingLoadoutSelectionSystem() )
		return





	LoadoutSelection_InitWeaponData()




















}

bool function IsUsingLoadoutSelectionSystem()
{
	return GetCurrentPlaylistVarBool( "loadoutselection_enable_loadouts", false )
}

bool function LoadoutSelection_ShouldAvoidDuplicateWeaponsInLoadoutRotation()
{
	return GetCurrentPlaylistVarBool( "loadoutselection_avoid_duplicate_weapons_in_loadouts", false )
}











































































































































































































































































































































































































void function LoadoutSelection_InitWeaponData()
{
	var dataTable    	= GetDataTable( file.weaponDataDatatable )
	int numRows      	= GetDataTableRowCount( dataTable )
	int col_supportedAttachmentOverride = GetDataTableColumnByName( dataTable, "supportedAttachmentOverride" )
	int col_weaponRef   = GetDataTableColumnByName( dataTable, "weaponRef" )







		for( int i = 0; i < numRows; ++i )
		{
			string weaponRef = strip( GetDataTableString( dataTable, i, col_weaponRef ) ).tolower()

			if ( weaponRef != "" )
			{






























				
				string supportedAttachmentOverrides = GetDataTableString( dataTable, i, col_supportedAttachmentOverride )
				supportedAttachmentOverrides = GetCurrentPlaylistVarString( "loadoutselection_" + weaponRef + "_supported_attachment_override", supportedAttachmentOverrides )
				if ( supportedAttachmentOverrides != "" )
				{
#if DEV
						printt( "LOADOUT SELECTION: Overriding supported attachments for " + weaponRef )
#endif
					LoadoutSelection_OverrideSupportedWeaponAttachmentsForWeaponRef( weaponRef, supportedAttachmentOverrides )
				}

			}
			else
			{
				Warning( "LoadoutSelection_InitWeaponData - Error reading LoadoutSelection_weapon_upgrades datatable. Expected weaponRef!" )
			}
		}
}






void function LoadoutSelection_OverrideSupportedWeaponAttachmentsForWeaponRef( string weaponRef, string supportedAttachmentsString )
{
	table< string, LootData > data = SURVIVAL_Loot_GetLootDataTable()

	if ( weaponRef in data )
	{
		array<string> supportedAttachments = SURVIVAL_Loot_GetSortedStringArrayFromSupportedAttachmentsString( supportedAttachmentsString )
		data[ weaponRef ].supportedAttachments = supportedAttachments
	}
	else
	{
		Warning( "LoadoutSelection_OverrideSupportedWeaponAttachmentsForWeaponRef - weaponRef %s not found in the LootData table, failed to override supported attachments", weaponRef )
	}
}


























































































































































































































































































































































































































































int function LoadoutSelection_GetSelectedLoadoutSlotIndex_CL_UI()
{
	return file.playerSelectedLoadout
}










































































int function LoadoutSelection_GetWeaponCountByLoadoutIndex( int loadoutIndex )
{
	int weaponCount = 0
	if ( loadoutIndex in file.loadoutSlotIndexToWeaponCountTable )
		weaponCount = file.loadoutSlotIndexToWeaponCountTable[ loadoutIndex ]

	return weaponCount
}







































































































































































































































































































































































































































void function LoadoutSelection_UpdateLoadoutInfo_UI( int loadoutIndex, string loadoutHeaderText, int weaponCount, int loadoutType )
{
	file.loadoutSlotIndexToHeaderTable[ loadoutIndex ] <- loadoutHeaderText
	file.loadoutSlotIndexToWeaponCountTable[ loadoutIndex ] <- weaponCount
	file.loadoutSlotIndexToLoadoutTypeTable[ loadoutIndex ] <- loadoutType
}




void function LoadoutSelection_SetSelectedLoadoutSlotIndex_UI( int loadoutIndex )
{
	if ( loadoutIndex < 0 || loadoutIndex >= LOADOUTSELECTION_MAX_TOTAL_LOADOUT_SLOTS )
		return

	file.playerSelectedLoadout = loadoutIndex
}



int function LoadoutSelection_GetSelectedLoadoutSlotIndex_UI()
{
	return file.playerSelectedLoadout
}




void function LoadoutSelection_SetLoadoutCounts_UI( int loadoutType, int loadoutCount )
{
	switch( loadoutType )
	{
		case  eLoadoutSelectionSlotType.REGULAR:
			if ( loadoutCount >= 0 && loadoutCount <= LOADOUTSELECTION_MAX_LOADOUT_COUNT_REGULAR )
				file.maxLoadoutCountRegular = loadoutCount
			break










		default:
			break
	}
}




int function LoadoutSelection_GetLoadoutCounts_UI( int loadoutType )
{
	int loadoutCount = -1
	switch( loadoutType )
	{
		case  eLoadoutSelectionSlotType.REGULAR:
			loadoutCount = file.maxLoadoutCountRegular
			break








		default:
			break
	}
	return loadoutCount
}




string function LoadoutSelection_GetLocalizedLoadoutHeader( int loadoutSlotIndex )
{
	string header = ""

	if ( !( loadoutSlotIndex in file.loadoutSlotIndexToHeaderTable ) )
		return header

	return Localize( file.loadoutSlotIndexToHeaderTable[ loadoutSlotIndex ] )
}


int function LoadoutSelection_GetLoadoutSlotTypeForLoadoutIndex( int loadoutSlotIndex )
{
	int slotType = eLoadoutSelectionSlotType.INVALID

	if ( loadoutSlotIndex in file.loadoutSlotIndexToLoadoutTypeTable )
		slotType = file.loadoutSlotIndexToLoadoutTypeTable[ loadoutSlotIndex ]

	return slotType
}



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































bool function LoadoutSelection_IsRefValidWeapon( string weaponRef )
{
	if( !SURVIVAL_Loot_IsRefValid( weaponRef ) )
		return false

	LootData lootData = SURVIVAL_Loot_GetLootDataByRef( weaponRef )
	return lootData.lootType == eLootType.MAINWEAPON
}
