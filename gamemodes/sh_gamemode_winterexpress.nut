global function WinterExpress_Init
global function WinterExpress_RegisterNetworking
global function WinterExpress_IsNarrowWin
































global function UI_UpdateOpenMenuButtonCallbacks_Spectate

































global enum eWinterExpressRoundState
{
	OBJECTIVE_ACTIVE,
	ABOUT_TO_CHANGE_STATIONS,
	CHANGING_STATIONS,
	ABOUT_TO_UNLOCK_STATION,
}

global enum eWinterExpressRoundEndCondition
{
	OBJECTIVE_CAPTURED,
	LAST_SQUAD_ALIVE,
	TIMER_EXPIRED,
	NO_SQUADS_ALIVE,
	OVERTIME_EXPIRED,
}

global enum eWinterExpressObjectiveState
{
	UNCONTROLLED,
	CONTESTED,
	CONTROLLED,
	INACTIVE,
}


const SPAWN_DIST = 3000
const SKY_DIVE_SPAWN_DIST = 10000
const SKY_DIVE_SPAWN_HEIGHT = 11000
const SKY_DIVE_CIRCLE_SPAWN_DIST = 10000
const SKY_DIVE_CIRCLE_SPAWN_HEIGHT = 7800
const SPAWN_MIN_RADIUS = 64
const SPAWN_MAX_RADIUS = 320
const SPAWN_MAX_TRY_COUNT = 40
const SPAWN_MAX_ARC = 45.0
const GRACE_PERIOD_SPAWN_DELAY = 5.0
const CHARACTER_SELECT_MIN_TIME = 5.0 

const float WINTER_EXPRESS_TRAIN_MAX_SPEED = 500
const float WINTER_EXPRESS_TRAIN_ACCELERATION = 50
const float WINTER_EXPRESS_LEAVE_BUFFER = 12
const float WINTER_EXPRESS_FIRST_STATION_UNLOCK_DELAY = 10


const float CONTESTED_LINE_DEBOUNCE = 10.0
const float HOLDING_LINE_DEBOUNCE = 10.0
const float REROLL_CHANCE = 50.0
global const array<string> WINTER_EXPRESS_DISABLED_BATTLE_CHATTER_EVENTS = [    "bc_anotherSquadAttackingUs",
	"bc_engagingEnemy",
	"bc_squadsLeft2 ",
	"bc_squadsLeft3 ",
	"bc_squadsLeftHalf",
	"bc_twoSquaddiesLeft",
	"bc_championEliminated",
	"bc_killLeaderNew",
	"bc_scatteredNag" ]

global const array<string> LONG_OR_FLAVORFUL_LINES = [    "Host_Mirage_SquadWinRoundByElim_03b_01",
	"Host_Mirage_SquadWinRoundByElim_03b_02",
	"Host_Mirage_TrainMoving_02b_01",
	"Host_Mirage_TrainMoving_02b_02",
	"Host_Mirage_TrainMoving_02b_03",
	"Host_Mirage_TrainMoving_04b_01",
	"Host_Mirage_TrainMoving_04b_02",
	"Host_Mirage_TrainMoving_04b_03",
	"Host_Mirage_WinnerCloseTimer_03b_01",
	"Host_Mirage_WinnerCloseTimer_03b_02",
	"Host_Mirage_WinnerFoundPointsNarrow_01b_01",
	"Host_Mirage_WinnerFoundPointsNarrow_01b_02",
	"Host_Mirage_WinnerFoundPointsWide_02b_01",
	"Host_Mirage_WinnerFoundPointsWide_02b_02",
	"Host_Mirage_PhoneLost_01b_01",
	"Host_Mirage_PhoneLost_01b_02",
	"Host_Mirage_PhoneLost_02b_01",
	"Host_Mirage_PhoneLost_02b_02",
	"Host_Mirage_PhoneLost_04b_01",
	"Host_Mirage_PhoneLost_04b_02",
	"Host_Mirage_TrainStop_03_01",
	"Host_Mirage_TrainStop_03_02",
	"Host_Mirage_TrainStop_03_03" ]



const vector OBJECTIVE_GREEN = <118, 224, 221>
const vector OBJECTIVE_RED = <164, 62, 62>
const vector OBJECTIVE_ORANGE = <240, 104, 64>
const vector OBJECTIVE_YELLOW = <245, 231, 110>

const string GAME_START_ANNOUNCEMENT = "#PL_GAME_START_ANNOUNCEMENT"
const string GAME_START_ANNOUNCEMENT_SUB = "#PL_GAME_START_ANNOUNCEMENT_SUB"

const string CAPTURED_THE_TRAIN = "#PL_CAPTURED_THE_TRAIN"
const string LOST_THE_TRAIN = "#PL_LOST_THE_TRAIN"
const string CONTESTING_THE_TRAIN = "#PL_CONTESTING_THE_TRAIN"
const string PL_OBJECTIVE_LOCKED = "#PL_INACTIVE_OBJECTIVE"

const string ROUND_END_OBJECTIVE_CAPTURED = "#PL_ROUND_END_OBJECTIVE_CAPTURED"
const string ROUND_END_OBJECTIVE_CAPTURED_SUB = "#PL_ROUND_END_OBJECTIVE_CAPTURED_SUB"
const string ROUND_END_LAST_SQUAD_ALIVE = "#PL_ROUND_END_LAST_SQUAD_ALIVE"
const string ROUND_END_LAST_SQUAD_ALIVE_SUB = "#PL_ROUND_END_LAST_SQUAD_ALIVE_SUB"
const string ROUND_END_TIMER_EXPIRED = "#PL_ROUND_END_TIMER_EXPIRED"
const string ROUND_END_OVERTIME_EXPIRED = "#PL_ROUND_END_OVERTIME_EXPIRED"
const string ROUND_END_OVERTIME_EXPIRED_SUB = "#PL_ROUND_END_OVERTIME_EXPIRED_SUB"
const string ROUND_END_TIMER_EXPIRED_SUB = "#PL_ROUND_END_TIMER_EXPIRED_SUB"
const string ROUND_END_NO_SQUADS = "PL_ROUND_END_NO_SQUADS"
const string ROUND_END_NO_SQUADS_SUB = "PL_ROUND_END_NO_SQUADS_SUB"

const string PL_ROUND_STARTED = "#PL_ROUND_STARTED"
const string PL_ROUND_STARTED_SUB = "#PL_ROUND_STARTED_SUB"

const string PL_OBJECTIVE_MOVING = "#PL_OBJECTIVE_MOVING"
const string PL_OBJECTIVE_MOVING_SUB = "#PL_OBJECTIVE_MOVING_SUB"

const string ROUND_STATE_ACTIVE = "#PL_ROUND_STATE_ACTIVE"
const string ROUND_STATE_CHANGING = "#PL_ROUND_STATE_CHANGING"
const string ROUND_ACTIVE_OBJECTIVE = "#PL_ROUND_ACTIVE_OBJECTIVE"
const string ROUND_CHANGING_OBJECTIVE = "#PL_ROUND_CHANGING_OBJECTIVE"
const string CURRENT_OBJECTIVE = "#PL_CURRENT_OBJECTIVE"
const string RESPAWNING_ALLOWED = "#PL_RESPAWNING_ALLOWED"
const string RESPAWNING_DISABLED = "#PL_RESPAWNING_DISABLED"

const string LOSER_ANNOUNCEMENT = "#PL_LOSER_ANNOUNCEMENT"
const string LOSER_ANNOUNCEMENT_SUB = "#PL_LOSER_ANNOUNCEMENT_SUB"

const asset CHAIR_GLOW_FX = $"P_item_bluelion"
const string TRAIN_MOVER_NAME = "desertlands_train_mover"
const string SOUND_THROW_ITEM = "weapon_sentryfragdrone_throw_1p"
const asset RESPAWN_BEACON_MOBILE_MODEL = $"mdl/props/pathfinder_beacon_radar/pathfinder_beacon_radar_animated.rmdl"


const float  HOLIDAY_HOVERTANK_ALT_CHECK 	= 0

struct {
	int           scoreLimit
	int           roundLimit
	entity        trainRef
	array<entity> trainTriggers

	table<int, int>             objectiveScore
	table< int, bool > 			isTeamOnMatchPoint
	table< int, bool > 			hasTeamGottenMatchPointAnnounce









































































} file



void function WinterExpress_Init()
{
	if ( !WinterExpress_IsModeEnabled() )
		return

	file.scoreLimit = GetCurrentPlaylistVarInt( "winter_express_score_limit", 100 )
	file.roundLimit = GetCurrentPlaylistVarInt( "winter_express_round_limit", 30 )


	Remote_RegisterServerFunction( "ClientCallback_WinterExpress_TryRespawnPlayer" )
























































































































}


void function WinterExpress_RegisterNetworking()
{
	if ( !WinterExpress_IsModeEnabled() )
		return

	Remote_RegisterClientFunction( "ServerCallback_CL_GameStartAnnouncement" )

	Remote_RegisterClientFunction( "ServerCallback_CL_RoundEnded", "int", 0, 128, "int", -2, 10000, "int", 0, 10000 )
	Remote_RegisterClientFunction( "ServerCallback_CL_ObjectiveStateChanged", "int", 0, 128, "int", -1, 128 )
	Remote_RegisterClientFunction( "ServerCallback_CL_SquadOnObjectiveStateChanged", "int", 0, 128, "bool" )
	Remote_RegisterClientFunction( "ServerCallback_CL_WinnerDetermined", "int", -1, 128 )
	Remote_RegisterClientFunction( "ServerCallback_CL_SquadEliminationStateChanged", "int", -1, 128, "bool" )
	Remote_RegisterClientFunction( "ServerCallback_CL_RespawnAnnouncement" )
	Remote_RegisterClientFunction( "ServerCallback_CL_ObserverModeSetToTrain" )
	Remote_RegisterClientFunction( "ServerCallback_CL_CameraLerpFromStationToHoverTank", "entity", "entity", "entity", "entity", "bool" )
	Remote_RegisterClientFunction( "ServerCallback_CL_CameraLerpTrain", "entity", "vector", -32000.0, 32000.0, 32, "entity", "bool" )
	Remote_RegisterClientFunction( "ServerCallback_CL_UpdateOpenMenuButtonCallbacks_Gameplay", "bool" )
	Remote_RegisterClientFunction( "ServerCallback_CL_DeregisterModeButtonPressedCallbacks" )
	Remote_RegisterClientFunction( "ServerCallback_CL_UpdateCurrentLoadoutHUD" )

	RegisterNetworkedVariable( "WinterExpress_RoundState", SNDC_GLOBAL, SNVT_INT, -1 )
	RegisterNetworkedVariable( "WinterExpress_RoundEnd", SNDC_GLOBAL, SNVT_TIME, -1 )
	RegisterNetworkedVariable( "WinterExpress_ObjectiveState", SNDC_GLOBAL, SNVT_INT, eWinterExpressObjectiveState.INACTIVE )
	RegisterNetworkedVariable( "WinterExpress_ObjectiveOwner", SNDC_GLOBAL, SNVT_INT, -1 )
	RegisterNetworkedVariable( "WinterExpress_UnlockDelayEndTime", SNDC_GLOBAL, SNVT_TIME, -1 )
	RegisterNetworkedVariable( "WinterExpress_CaptureEndTime", SNDC_GLOBAL, SNVT_TIME, -1 )
	RegisterNetworkedVariable( "WinterExpress_TrainArrivalTime", SNDC_GLOBAL, SNVT_TIME, -1 )
	RegisterNetworkedVariable( "WinterExpress_TrainTravelTime", SNDC_GLOBAL, SNVT_TIME, -1 )
	RegisterNetworkedVariable( "WinterExpress_WaveRespawnTime", SNDC_GLOBAL, SNVT_TIME, -1 )
	RegisterNetworkedVariable( "WinterExpress_RoundRespawnTime", SNDC_GLOBAL, SNVT_TIME, -1 )
	RegisterNetworkedVariable( "WinterExpress_IsOvertime", SNDC_GLOBAL, SNVT_BOOL, false )
	RegisterNetworkedVariable( "WinterExpress_RoundCounter", SNDC_GLOBAL, SNVT_INT, 0 )
	RegisterNetworkedVariable( "WinterExpress_NarrowWin", SNDC_GLOBAL, SNVT_BOOL, false )
	RegisterNetworkedVariable( "WinterExpress_HasGracePeriodPermit", SNDC_PLAYER_GLOBAL, SNVT_BOOL, false )
	RegisterNetworkedVariable( "WinterExpress_IsPlayerAllowedLegendChange", SNDC_PLAYER_EXCLUSIVE, SNVT_BOOL, false )










}

bool function WinterExpress_IsNarrowWin()
{
	return GetGlobalNetBool( "WinterExpress_NarrowWin" )
}























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































void function UI_UpdateOpenMenuButtonCallbacks_Spectate( int newLifeState, bool shouldCloseMenu )
{
	if ( GetGameState() > eGameState.WinnerDetermined || uiGlobal.isLevelShuttingDown )
		return

	if ( newLifeState == LIFE_ALIVE )
	{
		if ( shouldCloseMenu )
			RunClientScript( "CloseCharacterSelectNewMenu" )


		if ( IsUsingLoadoutSelectionSystem() )
		{
			if ( shouldCloseMenu && LoadoutSelectionMenu_IsLoadoutMenuOpen())
				LoadoutSelectionMenu_CloseLoadoutMenu()
		}
	}
}

void function WinterExpress_UI_OpenCharacterSelect( var button )
{
	var deathScreenMenu = GetMenu( "DeathScreenMenu" )
	if ( GetActiveMenu() != deathScreenMenu )
		return

	if ( GetGameState() != eGameState.Playing )
		return

	RunClientScript( "UICallback_WinterExpress_OpenCharacterSelect" )
}

void function WinterExpress_TryRespawn( var button )
{
	var characterSelectMenu = GetMenu( "CharacterSelectMenuNew" )
	if ( GetActiveMenu() == characterSelectMenu )
		return

	Remote_ServerCallFunction( "ClientCallback_WinterExpress_TryRespawnPlayer" )
}


void function WinterExpress_UI_OpenLoadoutSelect( var button )
{
	var deathScreenMenu = GetMenu( "DeathScreenMenu" )
	if ( GetActiveMenu() != deathScreenMenu )
		return

	if ( GetGameState() != eGameState.Playing )
		return

	LoadoutSelectionMenu_OpenLoadoutMenu( true )
}



























































































































































































































































































































































































































































































































































































































































































































































float function GetWaveRespawnInterval()
{
	return GetCurrentPlaylistVarFloat( "winter_express_wave_respawn_intreval", -1 )
}

bool function IsWaveRespawn()
{
	Assert ( !GetCurrentPlaylistVarBool( "winter_express_wave_respawn", false ) || (GetCurrentPlaylistVarBool( "winter_express_wave_respawn", false ) && GetWaveRespawnInterval() > 0) )

	return GetCurrentPlaylistVarBool( "winter_express_wave_respawn", false )
}

bool function IsRoundBasedRespawn()
{
	return GetCurrentPlaylistVarBool( "winter_express_round_based_respawn", false )
}

























































































































































































































































































































































































































































































































































































































































































